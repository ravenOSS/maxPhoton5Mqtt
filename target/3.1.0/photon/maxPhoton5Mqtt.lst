
/Users/blackbird/Dropbox/MBP_Projects/arduino/maxPhoton5Mqtt/target/3.1.0/photon/maxPhoton5Mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002434  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2450  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a2454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000118  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a24c0  080a24c0  000224c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a24e8  080a24e8  000224e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a9a69  00000000  00000000  000224ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000e905  00000000  00000000  000cbf55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001bc86  00000000  00000000  000da85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001cb0  00000000  00000000  000f64e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00004b60  00000000  00000000  000f8190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00023fe0  00000000  00000000  000fccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000266bc  00000000  00000000  00120cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b62ff  00000000  00000000  0014738c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004de4  00000000  00000000  001fd68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fec3 	bl	80a1db8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fecb 	bl	80a1dd4 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2454 	.word	0x080a2454
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000184 	.word	0x20000184
 80a0058:	20000184 	.word	0x20000184

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fd33 	bl	80a1ac8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2424 	.word	0x080a2424
 80a0080:	080a2444 	.word	0x080a2444

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b85a 	b.w	80a013c <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f8c1 	bl	80a0210 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bcd1 	b.w	80a1a38 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bd7d 	b.w	80a0b94 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bd7b 	b.w	80a0b94 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bd81 	b.w	80a0ba4 <free>

080a00a2 <_ZdaPv>:
 80a00a2:	f000 bd7f 	b.w	80a0ba4 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_Z8callbackPcPhj>:
 * MQTT client("mqtt.eclipse.org", 1883, callback);
 **/

byte server1[] = {192, 168, 0, 130};

void callback(char *topic, byte *payload, unsigned int length) {}
 80a00b6:	4770      	bx	lr

080a00b8 <_Z5alertv>:
    Serial.println("Failed to connect to broker");
    alert();
  }
}

void alert () {
 80a00b8:	b510      	push	{r4, lr}
    uint16_t blinks = 10;
    uint16_t i;
    RGB.control(true);
 80a00ba:	2001      	movs	r0, #1
 80a00bc:	f000 ff02 	bl	80a0ec4 <_ZN8RGBClass7controlEb>
 80a00c0:	240b      	movs	r4, #11
    for ( i = 0; i <= blinks; i++ ) {
    RGB.color(255, 0, 0);     // Set the RGB LED to red
 80a00c2:	2200      	movs	r2, #0
 80a00c4:	20ff      	movs	r0, #255	; 0xff
 80a00c6:	4611      	mov	r1, r2
 80a00c8:	f000 ff0c 	bl	80a0ee4 <_ZN8RGBClass5colorEiii>
    delay(1000);              // Keep it on for 1 second...
 80a00cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00d0:	f000 fd90 	bl	80a0bf4 <delay>
    RGB.color(255, 255, 255); // Sets the RGB LED to white
 80a00d4:	22ff      	movs	r2, #255	; 0xff
    for ( i = 0; i <= blinks; i++ ) {
 80a00d6:	3c01      	subs	r4, #1
    RGB.color(255, 255, 255); // Sets the RGB LED to white
 80a00d8:	4610      	mov	r0, r2
 80a00da:	4611      	mov	r1, r2
 80a00dc:	f000 ff02 	bl	80a0ee4 <_ZN8RGBClass5colorEiii>
    for ( i = 0; i <= blinks; i++ ) {
 80a00e0:	b2a4      	uxth	r4, r4
    delay(500);               // Wait 0.5 second...
 80a00e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00e6:	f000 fd85 	bl	80a0bf4 <delay>
    for ( i = 0; i <= blinks; i++ ) {
 80a00ea:	2c00      	cmp	r4, #0
 80a00ec:	d1e9      	bne.n	80a00c2 <_Z5alertv+0xa>
    }
    RGB.control(false);
 80a00ee:	4620      	mov	r0, r4

}
 80a00f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RGB.control(false);
 80a00f4:	f000 bee6 	b.w	80a0ec4 <_ZN8RGBClass7controlEb>

080a00f8 <_Z11mqttconnectv>:
void mqttconnect () {
 80a00f8:	b508      	push	{r3, lr}
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 80a00fa:	4b0c      	ldr	r3, [pc, #48]	; (80a012c <_Z11mqttconnectv+0x34>)
client.connect(clientID);
 80a00fc:	480c      	ldr	r0, [pc, #48]	; (80a0130 <_Z11mqttconnectv+0x38>)
 80a00fe:	6819      	ldr	r1, [r3, #0]
 80a0100:	f000 faec 	bl	80a06dc <_ZN4MQTT7connectEPKc>
  if (client.isConnected()) {
 80a0104:	480a      	ldr	r0, [pc, #40]	; (80a0130 <_Z11mqttconnectv+0x38>)
 80a0106:	f000 fa02 	bl	80a050e <_ZN4MQTT11isConnectedEv>
 80a010a:	b130      	cbz	r0, 80a011a <_Z11mqttconnectv+0x22>
    Serial.println("Connected to broker");
 80a010c:	f001 fb5a 	bl	80a17c4 <_Z16_fetch_usbserialv>
}
 80a0110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Connected to broker");
 80a0114:	4907      	ldr	r1, [pc, #28]	; (80a0134 <_Z11mqttconnectv+0x3c>)
 80a0116:	f000 bea8 	b.w	80a0e6a <_ZN5Print7printlnEPKc>
    Serial.println("Failed to connect to broker");
 80a011a:	f001 fb53 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a011e:	4906      	ldr	r1, [pc, #24]	; (80a0138 <_Z11mqttconnectv+0x40>)
 80a0120:	f000 fea3 	bl	80a0e6a <_ZN5Print7printlnEPKc>
}
 80a0124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    alert();
 80a0128:	f7ff bfc6 	b.w	80a00b8 <_Z5alertv>
 80a012c:	200000c8 	.word	0x200000c8
 80a0130:	20000070 	.word	0x20000070
 80a0134:	080a1f94 	.word	0x080a1f94
 80a0138:	080a1fa8 	.word	0x080a1fa8

080a013c <setup>:
{
 80a013c:	b508      	push	{r3, lr}
  Serial.begin(57600); // Serial monitor
 80a013e:	f001 fb41 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a0142:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80a0146:	f001 fb2b 	bl	80a17a0 <_ZN9USBSerial5beginEl>
  while (!Serial)
 80a014a:	f001 fb3b 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a014e:	f001 fb2e 	bl	80a17ae <_ZN9USBSerialcvbEv>
 80a0152:	2800      	cmp	r0, #0
 80a0154:	d0f9      	beq.n	80a014a <setup+0xe>
  Serial.println("Serial open");
 80a0156:	f001 fb35 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a015a:	490c      	ldr	r1, [pc, #48]	; (80a018c <setup+0x50>)
 80a015c:	f000 fe85 	bl	80a0e6a <_ZN5Print7printlnEPKc>
  Serial1.begin(9600, SERIAL_8N1); // Default but set explicitly anyway
 80a0160:	f001 fa8c 	bl	80a167c <_Z22__fetch_global_Serial1v>
 80a0164:	2200      	movs	r2, #0
 80a0166:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a016a:	f001 fa81 	bl	80a1670 <_ZN11USARTSerial5beginEmm>
  while (!Serial1)
 80a016e:	f001 fa85 	bl	80a167c <_Z22__fetch_global_Serial1v>
 80a0172:	f001 fa81 	bl	80a1678 <_ZN11USARTSerialcvbEv>
 80a0176:	2800      	cmp	r0, #0
 80a0178:	d0f9      	beq.n	80a016e <setup+0x32>
  Serial.println("Sensor connected");
 80a017a:	f001 fb23 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a017e:	4904      	ldr	r1, [pc, #16]	; (80a0190 <setup+0x54>)
 80a0180:	f000 fe73 	bl	80a0e6a <_ZN5Print7printlnEPKc>
}
 80a0184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mqttconnect();
 80a0188:	f7ff bfb6 	b.w	80a00f8 <_Z11mqttconnectv>
 80a018c:	080a1fc4 	.word	0x080a1fc4
 80a0190:	080a1fd0 	.word	0x080a1fd0

080a0194 <_Z7maxReadv>:
  delay(3000);
}

// uint16_t maxRead() {
String maxRead()
{                           // get a data string back from reading sensor
 80a0194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char inChar;              // type for data read
  const uint8_t length = 3; // number of ascii numeric characters in sensor data. Adjust for sensor type
  // char charArray[length];       // array to store range data
  String reading = ""; // empty string to add data
 80a0196:	491c      	ldr	r1, [pc, #112]	; (80a0208 <_Z7maxReadv+0x74>)
{                           // get a data string back from reading sensor
 80a0198:	4604      	mov	r4, r0
  uint8_t i = 0;       // initialize counter
 80a019a:	2600      	movs	r6, #0
  String reading = ""; // empty string to add data
 80a019c:	f000 ff0e 	bl	80a0fbc <_ZN6StringC1EPK19__FlashStringHelper>
      while (i < length)
      {
        // charArray[i] = Serial1.read(); // assign input char to charArray index
        reading += (Serial1.read() - '0'); // convert ASCII DEC to single numeral, add to range reading
                                           // Serial.print("char: ");        // debug
        Serial.print("reading: ");         // Display data accumulation
 80a01a0:	4f1a      	ldr	r7, [pc, #104]	; (80a020c <_Z7maxReadv+0x78>)
  while (Serial1.available())
 80a01a2:	f001 fa6b 	bl	80a167c <_Z22__fetch_global_Serial1v>
 80a01a6:	6803      	ldr	r3, [r0, #0]
 80a01a8:	691b      	ldr	r3, [r3, #16]
 80a01aa:	4798      	blx	r3
 80a01ac:	b350      	cbz	r0, 80a0204 <_Z7maxReadv+0x70>
    inChar = Serial1.read(); // continuously read sensor input in while loop
 80a01ae:	f001 fa65 	bl	80a167c <_Z22__fetch_global_Serial1v>
 80a01b2:	6803      	ldr	r3, [r0, #0]
 80a01b4:	695b      	ldr	r3, [r3, #20]
 80a01b6:	4798      	blx	r3
    if (inChar == 'R')
 80a01b8:	b2c0      	uxtb	r0, r0
 80a01ba:	2852      	cmp	r0, #82	; 0x52
 80a01bc:	d1f1      	bne.n	80a01a2 <_Z7maxReadv+0xe>
 80a01be:	4635      	mov	r5, r6
      while (i < length)
 80a01c0:	2d02      	cmp	r5, #2
 80a01c2:	d908      	bls.n	80a01d6 <_Z7maxReadv+0x42>
 80a01c4:	2e03      	cmp	r6, #3
 80a01c6:	f1c6 0303 	rsb	r3, r6, #3
 80a01ca:	bf88      	it	hi
 80a01cc:	2300      	movhi	r3, #0
 80a01ce:	441e      	add	r6, r3
 80a01d0:	f006 06ff 	and.w	r6, r6, #255	; 0xff
 80a01d4:	e7e5      	b.n	80a01a2 <_Z7maxReadv+0xe>
        reading += (Serial1.read() - '0'); // convert ASCII DEC to single numeral, add to range reading
 80a01d6:	f001 fa51 	bl	80a167c <_Z22__fetch_global_Serial1v>
 80a01da:	6803      	ldr	r3, [r0, #0]
                                           // Serial.println(charArray[i]);
        Serial.println(reading);
        i++;
 80a01dc:	3501      	adds	r5, #1
        reading += (Serial1.read() - '0'); // convert ASCII DEC to single numeral, add to range reading
 80a01de:	695b      	ldr	r3, [r3, #20]
 80a01e0:	4798      	blx	r3
	String & operator += (int num)			{concat(num); return (*this);}
 80a01e2:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 80a01e6:	4620      	mov	r0, r4
 80a01e8:	f000 ff23 	bl	80a1032 <_ZN6String6concatEi>
        Serial.print("reading: ");         // Display data accumulation
 80a01ec:	f001 faea 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a01f0:	4639      	mov	r1, r7
 80a01f2:	f000 fe27 	bl	80a0e44 <_ZN5Print5printEPKc>
        Serial.println(reading);
 80a01f6:	f001 fae5 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a01fa:	6821      	ldr	r1, [r4, #0]
 80a01fc:	f000 fe35 	bl	80a0e6a <_ZN5Print7printlnEPKc>
        i++;
 80a0200:	b2ed      	uxtb	r5, r5
      while (i < length)
 80a0202:	e7dd      	b.n	80a01c0 <_Z7maxReadv+0x2c>
      }
    }
  }
  // return atoi(charArray);            // extract integer range from char charArray
  return reading; // return range reading as a string
 80a0204:	4620      	mov	r0, r4
 80a0206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0208:	080a1ff5 	.word	0x080a1ff5
 80a020c:	080a1fe1 	.word	0x080a1fe1

080a0210 <loop>:
{
 80a0210:	b530      	push	{r4, r5, lr}
 80a0212:	b085      	sub	sp, #20
  String range = maxRead();
 80a0214:	4668      	mov	r0, sp
 80a0216:	f7ff ffbd 	bl	80a0194 <_Z7maxReadv>
  Serial.print("Distance: ");
 80a021a:	f001 fad3 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a021e:	491a      	ldr	r1, [pc, #104]	; (80a0288 <loop+0x78>)
 80a0220:	f000 fe10 	bl	80a0e44 <_ZN5Print5printEPKc>
  Serial.println(range);
 80a0224:	f001 face 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a0228:	9900      	ldr	r1, [sp, #0]
 80a022a:	f000 fe1e 	bl	80a0e6a <_ZN5Print7printlnEPKc>
  if (client.isConnected())
 80a022e:	4817      	ldr	r0, [pc, #92]	; (80a028c <loop+0x7c>)
 80a0230:	f000 f96d 	bl	80a050e <_ZN4MQTT11isConnectedEv>
 80a0234:	b120      	cbz	r0, 80a0240 <loop+0x30>
    client.publish("distance", range);
 80a0236:	9a00      	ldr	r2, [sp, #0]
 80a0238:	4915      	ldr	r1, [pc, #84]	; (80a0290 <loop+0x80>)
 80a023a:	4814      	ldr	r0, [pc, #80]	; (80a028c <loop+0x7c>)
 80a023c:	f000 fad3 	bl	80a07e6 <_ZN4MQTT7publishEPKcS1_>
  Serial.print("Int range: ");
 80a0240:	f001 fac0 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a0244:	4913      	ldr	r1, [pc, #76]	; (80a0294 <loop+0x84>)
 80a0246:	f000 fdfd 	bl	80a0e44 <_ZN5Print5printEPKc>
  Serial.println((range).toInt());
 80a024a:	f001 fabb 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a024e:	4605      	mov	r5, r0
 80a0250:	4668      	mov	r0, sp
 80a0252:	f000 feff 	bl	80a1054 <_ZNK6String5toIntEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0256:	1e04      	subs	r4, r0, #0
 80a0258:	da14      	bge.n	80a0284 <loop+0x74>
            t = print('-');
 80a025a:	212d      	movs	r1, #45	; 0x2d
 80a025c:	4628      	mov	r0, r5
 80a025e:	f000 fdf5 	bl	80a0e4c <_ZN5Print5printEc>
            val = -n;
 80a0262:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0264:	220a      	movs	r2, #10
 80a0266:	4628      	mov	r0, r5
 80a0268:	f000 fe09 	bl	80a0e7e <_ZN5Print11printNumberEmh>
        n += println();
 80a026c:	4628      	mov	r0, r5
 80a026e:	f000 fdf0 	bl	80a0e52 <_ZN5Print7printlnEv>
  delay(3000);
 80a0272:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a0276:	f000 fcbd 	bl	80a0bf4 <delay>
  String range = maxRead();
 80a027a:	4668      	mov	r0, sp
 80a027c:	f000 fe54 	bl	80a0f28 <_ZN6StringD1Ev>
}
 80a0280:	b005      	add	sp, #20
 80a0282:	bd30      	pop	{r4, r5, pc}
            val = n;
 80a0284:	4621      	mov	r1, r4
 80a0286:	e7ed      	b.n	80a0264 <loop+0x54>
 80a0288:	080a1feb 	.word	0x080a1feb
 80a028c:	20000070 	.word	0x20000070
 80a0290:	080a1ff6 	.word	0x080a1ff6
 80a0294:	080a1fff 	.word	0x080a1fff

080a0298 <_GLOBAL__sub_I_server1>:
 80a0298:	b538      	push	{r3, r4, r5, lr}
String clientID = "maxPhoton5";
 80a029a:	4c0d      	ldr	r4, [pc, #52]	; (80a02d0 <_GLOBAL__sub_I_server1+0x38>)
 80a029c:	4d0d      	ldr	r5, [pc, #52]	; (80a02d4 <_GLOBAL__sub_I_server1+0x3c>)
 80a029e:	4620      	mov	r0, r4
 80a02a0:	490d      	ldr	r1, [pc, #52]	; (80a02d8 <_GLOBAL__sub_I_server1+0x40>)
 80a02a2:	f000 fe8b 	bl	80a0fbc <_ZN6StringC1EPK19__FlashStringHelper>
 80a02a6:	4620      	mov	r0, r4
MQTT client(server1, 1883, callback);
 80a02a8:	4c0c      	ldr	r4, [pc, #48]	; (80a02dc <_GLOBAL__sub_I_server1+0x44>)
String clientID = "maxPhoton5";
 80a02aa:	462a      	mov	r2, r5
 80a02ac:	490c      	ldr	r1, [pc, #48]	; (80a02e0 <_GLOBAL__sub_I_server1+0x48>)
 80a02ae:	f001 fc55 	bl	80a1b5c <__aeabi_atexit>
MQTT client(server1, 1883, callback);
 80a02b2:	f240 725b 	movw	r2, #1883	; 0x75b
 80a02b6:	4620      	mov	r0, r4
 80a02b8:	4b0a      	ldr	r3, [pc, #40]	; (80a02e4 <_GLOBAL__sub_I_server1+0x4c>)
 80a02ba:	490b      	ldr	r1, [pc, #44]	; (80a02e8 <_GLOBAL__sub_I_server1+0x50>)
 80a02bc:	f000 f83a 	bl	80a0334 <_ZN4MQTTC1EPhtPFvPcS0_jE>
 80a02c0:	462a      	mov	r2, r5
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
MQTT client(server1, 1883, callback);
 80a02c8:	4908      	ldr	r1, [pc, #32]	; (80a02ec <_GLOBAL__sub_I_server1+0x54>)
 80a02ca:	f001 bc47 	b.w	80a1b5c <__aeabi_atexit>
 80a02ce:	bf00      	nop
 80a02d0:	200000c8 	.word	0x200000c8
 80a02d4:	2000006c 	.word	0x2000006c
 80a02d8:	080a200b 	.word	0x080a200b
 80a02dc:	20000070 	.word	0x20000070
 80a02e0:	080a0f29 	.word	0x080a0f29
 80a02e4:	080a00b7 	.word	0x080a00b7
 80a02e8:	20000000 	.word	0x20000000
 80a02ec:	080a080d 	.word	0x080a080d

080a02f0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a02f0:	b538      	push	{r3, r4, r5, lr}
 80a02f2:	461d      	mov	r5, r3
    this->callback = callback;
 80a02f4:	9b05      	ldr	r3, [sp, #20]
void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a02f6:	4604      	mov	r4, r0
    this->callback = callback;
 80a02f8:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a02fa:	2300      	movs	r3, #0
 80a02fc:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a02fe:	b102      	cbz	r2, 80a0302 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a0300:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a0302:	b119      	cbz	r1, 80a030c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a0304:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0308:	f000 fe6b 	bl	80a0fe2 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a030c:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a030e:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a0310:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0312:	9b06      	ldr	r3, [sp, #24]
    this->port = port;
 80a0314:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0318:	2bff      	cmp	r3, #255	; 0xff
 80a031a:	bfb8      	it	lt
 80a031c:	23ff      	movlt	r3, #255	; 0xff
 80a031e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0322:	b108      	cbz	r0, 80a0328 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a0324:	f7ff febd 	bl	80a00a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0328:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a032c:	f7ff feb5 	bl	80a009a <_Znaj>
 80a0330:	61e0      	str	r0, [r4, #28]
}
 80a0332:	bd38      	pop	{r3, r4, r5, pc}

080a0334 <_ZN4MQTTC1EPhtPFvPcS0_jE>:
MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0334:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0338:	4604      	mov	r4, r0
 80a033a:	2500      	movs	r5, #0
 80a033c:	4617      	mov	r7, r2
 80a033e:	4698      	mov	r8, r3
 80a0340:	460e      	mov	r6, r1
 80a0342:	f001 f8eb 	bl	80a151c <_ZN9TCPClientC1Ev>
 80a0346:	490b      	ldr	r1, [pc, #44]	; (80a0374 <_ZN4MQTTC1EPhtPFvPcS0_jE+0x40>)
 80a0348:	61e5      	str	r5, [r4, #28]
 80a034a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a034e:	f000 fe35 	bl	80a0fbc <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0352:	23ff      	movs	r3, #255	; 0xff
 80a0354:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0358:	230f      	movs	r3, #15
 80a035a:	4620      	mov	r0, r4
 80a035c:	9300      	str	r3, [sp, #0]
 80a035e:	4632      	mov	r2, r6
 80a0360:	463b      	mov	r3, r7
 80a0362:	4629      	mov	r1, r5
MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0364:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0366:	f7ff ffc3 	bl	80a02f0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a036a:	4620      	mov	r0, r4
 80a036c:	b004      	add	sp, #16
 80a036e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0372:	bf00      	nop
 80a0374:	080a1ff5 	.word	0x080a1ff5

080a0378 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0378:	b510      	push	{r4, lr}
 80a037a:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a037c:	4620      	mov	r0, r4
 80a037e:	f000 ffe3 	bl	80a1348 <_ZN9TCPClient9availableEv>
 80a0382:	2800      	cmp	r0, #0
 80a0384:	d0fa      	beq.n	80a037c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0386:	4620      	mov	r0, r4
 80a0388:	f000 feb7 	bl	80a10fa <_ZN9TCPClient4readEv>
}
 80a038c:	b2c0      	uxtb	r0, r0
 80a038e:	bd10      	pop	{r4, pc}

080a0390 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0394:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0396:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0398:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a039a:	f04f 0801 	mov.w	r8, #1
    buffer[len++] = readByte();
 80a039e:	f7ff ffeb 	bl	80a0378 <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a03a2:	2700      	movs	r7, #0
    buffer[len++] = readByte();
 80a03a4:	7020      	strb	r0, [r4, #0]
 80a03a6:	4644      	mov	r4, r8
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a03a8:	69eb      	ldr	r3, [r5, #28]
 80a03aa:	f893 a000 	ldrb.w	sl, [r3]
 80a03ae:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a03b2:	4628      	mov	r0, r5
 80a03b4:	f7ff ffe0 	bl	80a0378 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a03b8:	4626      	mov	r6, r4
 80a03ba:	69eb      	ldr	r3, [r5, #28]
 80a03bc:	3401      	adds	r4, #1
 80a03be:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a03c0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a03c4:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a03c8:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a03ca:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a03cc:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a03ce:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a03d2:	d4ee      	bmi.n	80a03b2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a03d4:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a03d6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a03da:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a03de:	d122      	bne.n	80a0426 <_ZN4MQTT10readPacketEPh+0x96>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a03e0:	4628      	mov	r0, r5
 80a03e2:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a03e6:	f7ff ffc7 	bl	80a0378 <_ZN4MQTT8readByteEv>
 80a03ea:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a03ee:	4628      	mov	r0, r5
 80a03f0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a03f4:	f7ff ffc0 	bl	80a0378 <_ZN4MQTT8readByteEv>
 80a03f8:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a03fa:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a03fc:	b2b6      	uxth	r6, r6
 80a03fe:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0402:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a0404:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0406:	b2b6      	uxth	r6, r6
 80a0408:	42be      	cmp	r6, r7
 80a040a:	d20e      	bcs.n	80a042a <_ZN4MQTT10readPacketEPh+0x9a>
        digit = readByte();
 80a040c:	4628      	mov	r0, r5
 80a040e:	f7ff ffb3 	bl	80a0378 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0412:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a0416:	3601      	adds	r6, #1
        if (len < this->maxpacketsize) {
 80a0418:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a041a:	bf84      	itt	hi
 80a041c:	69eb      	ldrhi	r3, [r5, #28]
 80a041e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a0420:	3401      	adds	r4, #1
 80a0422:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
 80a0424:	e7ef      	b.n	80a0406 <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a0426:	2600      	movs	r6, #0
 80a0428:	e7ed      	b.n	80a0406 <_ZN4MQTT10readPacketEPh+0x76>
    }

    if (len > this->maxpacketsize) {
 80a042a:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a042e:	42a3      	cmp	r3, r4
 80a0430:	bf2c      	ite	cs
 80a0432:	4620      	movcs	r0, r4
 80a0434:	2000      	movcc	r0, #0
 80a0436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a043a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a043a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a043e:	4615      	mov	r5, r2
 80a0440:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0442:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0444:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a0446:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a0448:	4696      	mov	lr, r2
 80a044a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a044e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0452:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a0454:	bf88      	it	hi
 80a0456:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        lenBuf[pos++] = digit;
 80a045a:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a045c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a0460:	4403      	add	r3, r0
        len = len / 128;
 80a0462:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
 80a0466:	b2e4      	uxtb	r4, r4
 80a0468:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
 80a046c:	d81e      	bhi.n	80a04ac <_ZN4MQTT5writeEhPht+0x72>

    buf[4-llen] = header;
 80a046e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
 80a0472:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
 80a0476:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
 80a0478:	4622      	mov	r2, r4
 80a047a:	a901      	add	r1, sp, #4
 80a047c:	4428      	add	r0, r5
    buf[4-llen] = header;
 80a047e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
 80a0482:	f001 fc99 	bl	80a1db8 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0486:	1c72      	adds	r2, r6, #1
 80a0488:	4422      	add	r2, r4
 80a048a:	4641      	mov	r1, r8
 80a048c:	4638      	mov	r0, r7
 80a048e:	f000 fe20 	bl	80a10d2 <_ZN9TCPClient5writeEPKhj>
 80a0492:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0494:	f000 f9ea 	bl	80a086c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0498:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a049a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a049c:	4434      	add	r4, r6
 80a049e:	b2a8      	uxth	r0, r5
}
 80a04a0:	1a23      	subs	r3, r4, r0
 80a04a2:	4258      	negs	r0, r3
 80a04a4:	4158      	adcs	r0, r3
 80a04a6:	b002      	add	sp, #8
 80a04a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
 80a04ac:	4623      	mov	r3, r4
 80a04ae:	e7cb      	b.n	80a0448 <_ZN4MQTT5writeEhPht+0xe>

080a04b0 <_ZN4MQTT10disconnectEv>:
    }
    return false;
}

void MQTT::disconnect() {
    buffer[0] = MQTTDISCONNECT;
 80a04b0:	22e0      	movs	r2, #224	; 0xe0
void MQTT::disconnect() {
 80a04b2:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
 80a04b4:	69c3      	ldr	r3, [r0, #28]
void MQTT::disconnect() {
 80a04b6:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a04b8:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a04ba:	2200      	movs	r2, #0
 80a04bc:	69c3      	ldr	r3, [r0, #28]
 80a04be:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a04c0:	69c1      	ldr	r1, [r0, #28]
 80a04c2:	2202      	movs	r2, #2
 80a04c4:	f000 fe05 	bl	80a10d2 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a04c8:	4620      	mov	r0, r4
 80a04ca:	f000 ff77 	bl	80a13bc <_ZN9TCPClient4stopEv>
 80a04ce:	f000 f9cd 	bl	80a086c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a04d2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
}
 80a04d6:	bd10      	pop	{r4, pc}

080a04d8 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a04d8:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a04da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a04dc:	4605      	mov	r5, r0
    pos += 2;
 80a04de:	b298      	uxth	r0, r3
 80a04e0:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a04e2:	5cce      	ldrb	r6, [r1, r3]
 80a04e4:	b29c      	uxth	r4, r3
 80a04e6:	b14e      	cbz	r6, 80a04fc <_ZN4MQTT11writeStringEPKcPht+0x24>
 80a04e8:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
 80a04ec:	1c5f      	adds	r7, r3, #1
 80a04ee:	4584      	cmp	ip, r0
 80a04f0:	d904      	bls.n	80a04fc <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
 80a04f2:	1c44      	adds	r4, r0, #1
 80a04f4:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a04f6:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a04f8:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
 80a04fa:	e7f2      	b.n	80a04e2 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a04fc:	b299      	uxth	r1, r3
 80a04fe:	1a41      	subs	r1, r0, r1
 80a0500:	440a      	add	r2, r1
 80a0502:	0a21      	lsrs	r1, r4, #8
 80a0504:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0508:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a050c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a050e <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a050e:	b538      	push	{r3, r4, r5, lr}
 80a0510:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a0512:	f000 ffaa 	bl	80a146a <_ZN9TCPClient9connectedEv>
 80a0516:	2800      	cmp	r0, #0
 80a0518:	bf14      	ite	ne
 80a051a:	2501      	movne	r5, #1
 80a051c:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a051e:	d102      	bne.n	80a0526 <_ZN4MQTT11isConnectedEv+0x18>
 80a0520:	4620      	mov	r0, r4
 80a0522:	f000 ff4b 	bl	80a13bc <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0526:	4628      	mov	r0, r5
 80a0528:	bd38      	pop	{r3, r4, r5, pc}
	...

080a052c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a052c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0530:	b086      	sub	sp, #24
 80a0532:	4604      	mov	r4, r0
 80a0534:	4689      	mov	r9, r1
 80a0536:	4617      	mov	r7, r2
 80a0538:	461e      	mov	r6, r3
 80a053a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a053e:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    if (!isConnected()) {
 80a0542:	f7ff ffe4 	bl	80a050e <_ZN4MQTT11isConnectedEv>
 80a0546:	4605      	mov	r5, r0
 80a0548:	2800      	cmp	r0, #0
 80a054a:	f040 80c3 	bne.w	80a06d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>
        if (ip == NULL)
 80a054e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0550:	2900      	cmp	r1, #0
 80a0552:	f040 8086 	bne.w	80a0662 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x136>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0556:	4603      	mov	r3, r0
 80a0558:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a055c:	4620      	mov	r0, r4
 80a055e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0560:	f000 fff4 	bl	80a154c <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a0564:	2800      	cmp	r0, #0
 80a0566:	d078      	beq.n	80a065a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12e>
            nextMsgId = 1;
 80a0568:	2301      	movs	r3, #1
 80a056a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a056c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0570:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
 80a0572:	2b04      	cmp	r3, #4
 80a0574:	4b58      	ldr	r3, [pc, #352]	; (80a06d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ac>)
 80a0576:	d17f      	bne.n	80a0678 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x14c>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0578:	6818      	ldr	r0, [r3, #0]
 80a057a:	8899      	ldrh	r1, [r3, #4]
 80a057c:	799b      	ldrb	r3, [r3, #6]
 80a057e:	f8ad 1004 	strh.w	r1, [sp, #4]
 80a0582:	f88d 3006 	strb.w	r3, [sp, #6]
 80a0586:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0588:	f8c2 0005 	str.w	r0, [r2, #5]
 80a058c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0590:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0594:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a0596:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0598:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a059c:	f1b8 0f00 	cmp.w	r8, #0
 80a05a0:	d07f      	beq.n	80a06a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x176>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a05a2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80a05a6:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80a05aa:	0140      	lsls	r0, r0, #5
 80a05ac:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a05b0:	f040 0006 	orr.w	r0, r0, #6
 80a05b4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a05b6:	f1ba 0f00 	cmp.w	sl, #0
 80a05ba:	d101      	bne.n	80a05c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
              v = v&0xfd;
 80a05bc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a05c0:	b11f      	cbz	r7, 80a05ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
                if(pass != NULL) {
 80a05c2:	2e00      	cmp	r6, #0
 80a05c4:	d16f      	bne.n	80a06a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x17a>
                v = v|0x80;
 80a05c6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a05ca:	69e2      	ldr	r2, [r4, #28]
 80a05cc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a05ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a05d0:	69e1      	ldr	r1, [r4, #28]
 80a05d2:	1c58      	adds	r0, r3, #1
 80a05d4:	1212      	asrs	r2, r2, #8
 80a05d6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a05d8:	69e1      	ldr	r1, [r4, #28]
 80a05da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a05dc:	1c9a      	adds	r2, r3, #2
 80a05de:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a05e0:	3303      	adds	r3, #3
 80a05e2:	4649      	mov	r1, r9
 80a05e4:	4620      	mov	r0, r4
 80a05e6:	69e2      	ldr	r2, [r4, #28]
 80a05e8:	f7ff ff76 	bl	80a04d8 <_ZN4MQTT11writeStringEPKcPht>
 80a05ec:	4603      	mov	r3, r0
            if (willTopic) {
 80a05ee:	f1b8 0f00 	cmp.w	r8, #0
 80a05f2:	d00b      	beq.n	80a060c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                length = writeString(willTopic, buffer, length);
 80a05f4:	4641      	mov	r1, r8
 80a05f6:	69e2      	ldr	r2, [r4, #28]
 80a05f8:	4620      	mov	r0, r4
 80a05fa:	f7ff ff6d 	bl	80a04d8 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a05fe:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a0600:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a0602:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0604:	4620      	mov	r0, r4
 80a0606:	f7ff ff67 	bl	80a04d8 <_ZN4MQTT11writeStringEPKcPht>
 80a060a:	4603      	mov	r3, r0
            if(user != NULL) {
 80a060c:	b167      	cbz	r7, 80a0628 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfc>
                length = writeString(user,buffer,length);
 80a060e:	4639      	mov	r1, r7
 80a0610:	4620      	mov	r0, r4
 80a0612:	69e2      	ldr	r2, [r4, #28]
 80a0614:	f7ff ff60 	bl	80a04d8 <_ZN4MQTT11writeStringEPKcPht>
 80a0618:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a061a:	b12e      	cbz	r6, 80a0628 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfc>
                    length = writeString(pass,buffer,length);
 80a061c:	4631      	mov	r1, r6
 80a061e:	4620      	mov	r0, r4
 80a0620:	69e2      	ldr	r2, [r4, #28]
 80a0622:	f7ff ff59 	bl	80a04d8 <_ZN4MQTT11writeStringEPKcPht>
 80a0626:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a0628:	3b05      	subs	r3, #5
 80a062a:	2110      	movs	r1, #16
 80a062c:	69e2      	ldr	r2, [r4, #28]
 80a062e:	b29b      	uxth	r3, r3
 80a0630:	4620      	mov	r0, r4
 80a0632:	f7ff ff02 	bl	80a043a <_ZN4MQTT5writeEhPht>
 80a0636:	f000 f919 	bl	80a086c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a063a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a063e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a0642:	4620      	mov	r0, r4
 80a0644:	f000 fe80 	bl	80a1348 <_ZN9TCPClient9availableEv>
 80a0648:	bb80      	cbnz	r0, 80a06ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
 80a064a:	f000 f90f 	bl	80a086c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a064e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0650:	1ac0      	subs	r0, r0, r3
 80a0652:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0654:	4373      	muls	r3, r6
 80a0656:	4298      	cmp	r0, r3
 80a0658:	d9f3      	bls.n	80a0642 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x116>
        _client.stop();
 80a065a:	4620      	mov	r0, r4
 80a065c:	f000 feae 	bl	80a13bc <_ZN9TCPClient4stopEv>
 80a0660:	e034      	b.n	80a06cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
            result = _client.connect(this->ip, this->port);
 80a0662:	4668      	mov	r0, sp
 80a0664:	f000 fb36 	bl	80a0cd4 <_ZN9IPAddressC1EPKh>
 80a0668:	462b      	mov	r3, r5
 80a066a:	4669      	mov	r1, sp
 80a066c:	4620      	mov	r0, r4
 80a066e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0672:	f000 fdf9 	bl	80a1268 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0676:	e775      	b.n	80a0564 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x38>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0678:	46ec      	mov	ip, sp
 80a067a:	f8d3 0007 	ldr.w	r0, [r3, #7]
 80a067e:	f8d3 100b 	ldr.w	r1, [r3, #11]
 80a0682:	7bdb      	ldrb	r3, [r3, #15]
 80a0684:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a0688:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a068c:	466b      	mov	r3, sp
 80a068e:	cb03      	ldmia	r3!, {r0, r1}
 80a0690:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0694:	f8c2 1009 	str.w	r1, [r2, #9]
 80a0698:	f89c 3000 	ldrb.w	r3, [ip]
 80a069c:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a069e:	230e      	movs	r3, #14
 80a06a0:	e77c      	b.n	80a059c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x70>
                v = 0x02;
 80a06a2:	2002      	movs	r0, #2
 80a06a4:	e787      	b.n	80a05b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x8a>
                    v = v|(0x80>>1);
 80a06a6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a06aa:	e78e      	b.n	80a05ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
            uint16_t len = readPacket(&llen);
 80a06ac:	4669      	mov	r1, sp
 80a06ae:	4620      	mov	r0, r4
 80a06b0:	f7ff fe6e 	bl	80a0390 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a06b4:	2804      	cmp	r0, #4
 80a06b6:	d1d0      	bne.n	80a065a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12e>
                if (buffer[3] == CONN_ACCEPT) {
 80a06b8:	69e3      	ldr	r3, [r4, #28]
 80a06ba:	78de      	ldrb	r6, [r3, #3]
 80a06bc:	2e00      	cmp	r6, #0
 80a06be:	d1cc      	bne.n	80a065a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12e>
 80a06c0:	f000 f8d4 	bl	80a086c <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a06c4:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a06c6:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a06c8:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 80a06cc:	4628      	mov	r0, r5
 80a06ce:	b006      	add	sp, #24
 80a06d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a06d4:	2500      	movs	r5, #0
 80a06d6:	e7f9      	b.n	80a06cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
 80a06d8:	080a2016 	.word	0x080a2016

080a06dc <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a06dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a06de:	2301      	movs	r3, #1
 80a06e0:	2204      	movs	r2, #4
 80a06e2:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a06e6:	2300      	movs	r3, #0
 80a06e8:	461a      	mov	r2, r3
 80a06ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a06ee:	e9cd 3300 	strd	r3, r3, [sp]
 80a06f2:	f7ff ff1b 	bl	80a052c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a06f6:	b007      	add	sp, #28
 80a06f8:	f85d fb04 	ldr.w	pc, [sp], #4

080a06fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a06fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0700:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80a0704:	4604      	mov	r4, r0
 80a0706:	468b      	mov	fp, r1
 80a0708:	4616      	mov	r6, r2
 80a070a:	461f      	mov	r7, r3
 80a070c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 80a0710:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a0714:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (isConnected()) {
 80a0718:	f7ff fef9 	bl	80a050e <_ZN4MQTT11isConnectedEv>
 80a071c:	2800      	cmp	r0, #0
 80a071e:	d050      	beq.n	80a07c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        memset(buffer, 0, this->maxpacketsize);
 80a0720:	2100      	movs	r1, #0
 80a0722:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0726:	69e0      	ldr	r0, [r4, #28]
 80a0728:	f001 fb54 	bl	80a1dd4 <memset>
        length = writeString(topic, buffer, length);
 80a072c:	2305      	movs	r3, #5
 80a072e:	4659      	mov	r1, fp
 80a0730:	4620      	mov	r0, r4
 80a0732:	69e2      	ldr	r2, [r4, #28]
 80a0734:	f7ff fed0 	bl	80a04d8 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a0738:	1e6b      	subs	r3, r5, #1
 80a073a:	2b01      	cmp	r3, #1
 80a073c:	d815      	bhi.n	80a076a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
            nextMsgId += 1;
 80a073e:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0740:	69e2      	ldr	r2, [r4, #28]
            nextMsgId += 1;
 80a0742:	3301      	adds	r3, #1
 80a0744:	b29b      	uxth	r3, r3
 80a0746:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0748:	0a1b      	lsrs	r3, r3, #8
 80a074a:	5413      	strb	r3, [r2, r0]
 80a074c:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a074e:	69e3      	ldr	r3, [r4, #28]
 80a0750:	8c22      	ldrh	r2, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0752:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0754:	3002      	adds	r0, #2
 80a0756:	b280      	uxth	r0, r0
 80a0758:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a075a:	f1b8 0f00 	cmp.w	r8, #0
 80a075e:	d004      	beq.n	80a076a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
                *messageid = nextMsgId++;
 80a0760:	8c23      	ldrh	r3, [r4, #32]
 80a0762:	1c5a      	adds	r2, r3, #1
 80a0764:	8422      	strh	r2, [r4, #32]
 80a0766:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a076a:	2100      	movs	r1, #0
 80a076c:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a076e:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
 80a0770:	69e2      	ldr	r2, [r4, #28]
 80a0772:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0774:	d90a      	bls.n	80a078c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
 80a0776:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a077a:	459c      	cmp	ip, r3
 80a077c:	d906      	bls.n	80a078c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            buffer[length++] = payload[i];
 80a077e:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0782:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a0784:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0788:	b289      	uxth	r1, r1
 80a078a:	e7ef      	b.n	80a076c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x70>
            header |= 1;
 80a078c:	f1ba 0f00 	cmp.w	sl, #0
 80a0790:	bf0c      	ite	eq
 80a0792:	2130      	moveq	r1, #48	; 0x30
 80a0794:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a0796:	f1b9 0f00 	cmp.w	r9, #0
 80a079a:	d001      	beq.n	80a07a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa4>
            header |= DUP_FLAG_ON_MASK;
 80a079c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a07a0:	2d02      	cmp	r5, #2
 80a07a2:	d109      	bne.n	80a07b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
            header |= MQTTQOS2_HEADER_MASK;
 80a07a4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a07a8:	4620      	mov	r0, r4
 80a07aa:	3b05      	subs	r3, #5
 80a07ac:	b29b      	uxth	r3, r3
}
 80a07ae:	b001      	add	sp, #4
 80a07b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return write(header, buffer, length-5);
 80a07b4:	f7ff be41 	b.w	80a043a <_ZN4MQTT5writeEhPht>
        else if (qos == QOS1)
 80a07b8:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a07ba:	bf08      	it	eq
 80a07bc:	f041 0102 	orreq.w	r1, r1, #2
 80a07c0:	e7f2      	b.n	80a07a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
}
 80a07c2:	b001      	add	sp, #4
 80a07c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a07c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a07c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a07ca:	9c08      	ldr	r4, [sp, #32]
 80a07cc:	9403      	str	r4, [sp, #12]
 80a07ce:	2400      	movs	r4, #0
 80a07d0:	9402      	str	r4, [sp, #8]
 80a07d2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a07d6:	9401      	str	r4, [sp, #4]
 80a07d8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a07dc:	9400      	str	r4, [sp, #0]
 80a07de:	f7ff ff8d 	bl	80a06fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a07e2:	b004      	add	sp, #16
 80a07e4:	bd10      	pop	{r4, pc}

080a07e6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a07e6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a07e8:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a07ea:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a07ec:	4614      	mov	r4, r2
 80a07ee:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a07f0:	f001 fb38 	bl	80a1e64 <strlen>
 80a07f4:	2200      	movs	r2, #0
 80a07f6:	4603      	mov	r3, r0
 80a07f8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a07fc:	9200      	str	r2, [sp, #0]
 80a07fe:	4631      	mov	r1, r6
 80a0800:	4622      	mov	r2, r4
 80a0802:	4628      	mov	r0, r5
 80a0804:	f7ff ffe0 	bl	80a07c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a0808:	b004      	add	sp, #16
 80a080a:	bd70      	pop	{r4, r5, r6, pc}

080a080c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
 80a080c:	b538      	push	{r3, r4, r5, lr}
 80a080e:	4605      	mov	r5, r0
    if (isConnected()) {
 80a0810:	f7ff fe7d 	bl	80a050e <_ZN4MQTT11isConnectedEv>
 80a0814:	b110      	cbz	r0, 80a081c <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a0816:	4628      	mov	r0, r5
 80a0818:	f7ff fe4a 	bl	80a04b0 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
 80a081c:	69e8      	ldr	r0, [r5, #28]
 80a081e:	b108      	cbz	r0, 80a0824 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a0820:	f7ff fc3f 	bl	80a00a2 <_ZdaPv>
MQTT::~MQTT() {
 80a0824:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80a0828:	f000 fb7e 	bl	80a0f28 <_ZN6StringD1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a082c:	4b0a      	ldr	r3, [pc, #40]	; (80a0858 <_ZN4MQTTD1Ev+0x4c>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a082e:	69ac      	ldr	r4, [r5, #24]
 80a0830:	602b      	str	r3, [r5, #0]
 80a0832:	b17c      	cbz	r4, 80a0854 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
 80a0834:	6863      	ldr	r3, [r4, #4]
 80a0836:	3b01      	subs	r3, #1
 80a0838:	6063      	str	r3, [r4, #4]
 80a083a:	b95b      	cbnz	r3, 80a0854 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
 80a083c:	6823      	ldr	r3, [r4, #0]
 80a083e:	4620      	mov	r0, r4
 80a0840:	689b      	ldr	r3, [r3, #8]
 80a0842:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0844:	68a3      	ldr	r3, [r4, #8]
 80a0846:	3b01      	subs	r3, #1
 80a0848:	60a3      	str	r3, [r4, #8]
 80a084a:	b91b      	cbnz	r3, 80a0854 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
 80a084c:	6823      	ldr	r3, [r4, #0]
 80a084e:	4620      	mov	r0, r4
 80a0850:	68db      	ldr	r3, [r3, #12]
 80a0852:	4798      	blx	r3
}
 80a0854:	4628      	mov	r0, r5
 80a0856:	bd38      	pop	{r3, r4, r5, pc}
 80a0858:	080a20c4 	.word	0x080a20c4

080a085c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a085c:	b508      	push	{r3, lr}
 80a085e:	4b02      	ldr	r3, [pc, #8]	; (80a0868 <HAL_RNG_GetRandomNumber+0xc>)
 80a0860:	681b      	ldr	r3, [r3, #0]
 80a0862:	685b      	ldr	r3, [r3, #4]
 80a0864:	9301      	str	r3, [sp, #4]
 80a0866:	bd08      	pop	{r3, pc}
 80a0868:	0806019c 	.word	0x0806019c

080a086c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a086c:	b508      	push	{r3, lr}
 80a086e:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0870:	681b      	ldr	r3, [r3, #0]
 80a0872:	695b      	ldr	r3, [r3, #20]
 80a0874:	9301      	str	r3, [sp, #4]
 80a0876:	bd08      	pop	{r3, pc}
 80a0878:	0806019c 	.word	0x0806019c

080a087c <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a087c:	b508      	push	{r3, lr}
 80a087e:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <socket_active_status+0xc>)
 80a0880:	681b      	ldr	r3, [r3, #0]
 80a0882:	681b      	ldr	r3, [r3, #0]
 80a0884:	9301      	str	r3, [sp, #4]
 80a0886:	bd08      	pop	{r3, pc}
 80a0888:	080601bc 	.word	0x080601bc

080a088c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a088c:	b508      	push	{r3, lr}
 80a088e:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <socket_handle_valid+0xc>)
 80a0890:	681b      	ldr	r3, [r3, #0]
 80a0892:	685b      	ldr	r3, [r3, #4]
 80a0894:	9301      	str	r3, [sp, #4]
 80a0896:	bd08      	pop	{r3, pc}
 80a0898:	080601bc 	.word	0x080601bc

080a089c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b02      	ldr	r3, [pc, #8]	; (80a08a8 <socket_create+0xc>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	689b      	ldr	r3, [r3, #8]
 80a08a4:	9301      	str	r3, [sp, #4]
 80a08a6:	bd08      	pop	{r3, pc}
 80a08a8:	080601bc 	.word	0x080601bc

080a08ac <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a08ac:	b508      	push	{r3, lr}
 80a08ae:	4b02      	ldr	r3, [pc, #8]	; (80a08b8 <socket_connect+0xc>)
 80a08b0:	681b      	ldr	r3, [r3, #0]
 80a08b2:	68db      	ldr	r3, [r3, #12]
 80a08b4:	9301      	str	r3, [sp, #4]
 80a08b6:	bd08      	pop	{r3, pc}
 80a08b8:	080601bc 	.word	0x080601bc

080a08bc <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a08bc:	b508      	push	{r3, lr}
 80a08be:	4b02      	ldr	r3, [pc, #8]	; (80a08c8 <socket_receive+0xc>)
 80a08c0:	681b      	ldr	r3, [r3, #0]
 80a08c2:	691b      	ldr	r3, [r3, #16]
 80a08c4:	9301      	str	r3, [sp, #4]
 80a08c6:	bd08      	pop	{r3, pc}
 80a08c8:	080601bc 	.word	0x080601bc

080a08cc <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a08cc:	b508      	push	{r3, lr}
 80a08ce:	4b02      	ldr	r3, [pc, #8]	; (80a08d8 <socket_close+0xc>)
 80a08d0:	681b      	ldr	r3, [r3, #0]
 80a08d2:	6a1b      	ldr	r3, [r3, #32]
 80a08d4:	9301      	str	r3, [sp, #4]
 80a08d6:	bd08      	pop	{r3, pc}
 80a08d8:	080601bc 	.word	0x080601bc

080a08dc <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <socket_handle_invalid+0xc>)
 80a08e0:	681b      	ldr	r3, [r3, #0]
 80a08e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08e4:	9301      	str	r3, [sp, #4]
 80a08e6:	bd08      	pop	{r3, pc}
 80a08e8:	080601bc 	.word	0x080601bc

080a08ec <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a08ec:	b508      	push	{r3, lr}
 80a08ee:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <socket_send_ex+0xc>)
 80a08f0:	681b      	ldr	r3, [r3, #0]
 80a08f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	bd08      	pop	{r3, pc}
 80a08f8:	080601bc 	.word	0x080601bc

080a08fc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a08fc:	b508      	push	{r3, lr}
 80a08fe:	4b02      	ldr	r3, [pc, #8]	; (80a0908 <hal_usart_init+0xc>)
 80a0900:	681b      	ldr	r3, [r3, #0]
 80a0902:	699b      	ldr	r3, [r3, #24]
 80a0904:	9301      	str	r3, [sp, #4]
 80a0906:	bd08      	pop	{r3, pc}
 80a0908:	080601c4 	.word	0x080601c4

080a090c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <hal_usart_write+0xc>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0914:	9301      	str	r3, [sp, #4]
 80a0916:	bd08      	pop	{r3, pc}
 80a0918:	080601c4 	.word	0x080601c4

080a091c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <hal_usart_available+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601c4 	.word	0x080601c4

080a092c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <hal_usart_read+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601c4 	.word	0x080601c4

080a093c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b02      	ldr	r3, [pc, #8]	; (80a0948 <hal_usart_peek+0xc>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0944:	9301      	str	r3, [sp, #4]
 80a0946:	bd08      	pop	{r3, pc}
 80a0948:	080601c4 	.word	0x080601c4

080a094c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a094c:	b508      	push	{r3, lr}
 80a094e:	4b02      	ldr	r3, [pc, #8]	; (80a0958 <hal_usart_flush+0xc>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0954:	9301      	str	r3, [sp, #4]
 80a0956:	bd08      	pop	{r3, pc}
 80a0958:	080601c4 	.word	0x080601c4

080a095c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a095c:	b508      	push	{r3, lr}
 80a095e:	4b02      	ldr	r3, [pc, #8]	; (80a0968 <hal_usart_available_data_for_write+0xc>)
 80a0960:	681b      	ldr	r3, [r3, #0]
 80a0962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0964:	9301      	str	r3, [sp, #4]
 80a0966:	bd08      	pop	{r3, pc}
 80a0968:	080601c4 	.word	0x080601c4

080a096c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b02      	ldr	r3, [pc, #8]	; (80a0978 <hal_usart_begin_config+0xc>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0974:	9301      	str	r3, [sp, #4]
 80a0976:	bd08      	pop	{r3, pc}
 80a0978:	080601c4 	.word	0x080601c4

080a097c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a097c:	b508      	push	{r3, lr}
 80a097e:	4b02      	ldr	r3, [pc, #8]	; (80a0988 <HAL_USB_USART_Init+0xc>)
 80a0980:	681b      	ldr	r3, [r3, #0]
 80a0982:	681b      	ldr	r3, [r3, #0]
 80a0984:	9301      	str	r3, [sp, #4]
 80a0986:	bd08      	pop	{r3, pc}
 80a0988:	080601d8 	.word	0x080601d8

080a098c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a098c:	b508      	push	{r3, lr}
 80a098e:	4b02      	ldr	r3, [pc, #8]	; (80a0998 <HAL_USB_USART_Begin+0xc>)
 80a0990:	681b      	ldr	r3, [r3, #0]
 80a0992:	685b      	ldr	r3, [r3, #4]
 80a0994:	9301      	str	r3, [sp, #4]
 80a0996:	bd08      	pop	{r3, pc}
 80a0998:	080601d8 	.word	0x080601d8

080a099c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a099c:	b508      	push	{r3, lr}
 80a099e:	4b02      	ldr	r3, [pc, #8]	; (80a09a8 <HAL_USB_USART_Available_Data+0xc>)
 80a09a0:	681b      	ldr	r3, [r3, #0]
 80a09a2:	691b      	ldr	r3, [r3, #16]
 80a09a4:	9301      	str	r3, [sp, #4]
 80a09a6:	bd08      	pop	{r3, pc}
 80a09a8:	080601d8 	.word	0x080601d8

080a09ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a09ac:	b508      	push	{r3, lr}
 80a09ae:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a09b0:	681b      	ldr	r3, [r3, #0]
 80a09b2:	695b      	ldr	r3, [r3, #20]
 80a09b4:	9301      	str	r3, [sp, #4]
 80a09b6:	bd08      	pop	{r3, pc}
 80a09b8:	080601d8 	.word	0x080601d8

080a09bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09bc:	b508      	push	{r3, lr}
 80a09be:	4b02      	ldr	r3, [pc, #8]	; (80a09c8 <HAL_USB_USART_Receive_Data+0xc>)
 80a09c0:	681b      	ldr	r3, [r3, #0]
 80a09c2:	699b      	ldr	r3, [r3, #24]
 80a09c4:	9301      	str	r3, [sp, #4]
 80a09c6:	bd08      	pop	{r3, pc}
 80a09c8:	080601d8 	.word	0x080601d8

080a09cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09cc:	b508      	push	{r3, lr}
 80a09ce:	4b02      	ldr	r3, [pc, #8]	; (80a09d8 <HAL_USB_USART_Send_Data+0xc>)
 80a09d0:	681b      	ldr	r3, [r3, #0]
 80a09d2:	69db      	ldr	r3, [r3, #28]
 80a09d4:	9301      	str	r3, [sp, #4]
 80a09d6:	bd08      	pop	{r3, pc}
 80a09d8:	080601d8 	.word	0x080601d8

080a09dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b02      	ldr	r3, [pc, #8]	; (80a09e8 <HAL_USB_USART_Flush_Data+0xc>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	6a1b      	ldr	r3, [r3, #32]
 80a09e4:	9301      	str	r3, [sp, #4]
 80a09e6:	bd08      	pop	{r3, pc}
 80a09e8:	080601d8 	.word	0x080601d8

080a09ec <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a09ec:	b508      	push	{r3, lr}
 80a09ee:	4b02      	ldr	r3, [pc, #8]	; (80a09f8 <HAL_USB_USART_Is_Enabled+0xc>)
 80a09f0:	681b      	ldr	r3, [r3, #0]
 80a09f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a09f4:	9301      	str	r3, [sp, #4]
 80a09f6:	bd08      	pop	{r3, pc}
 80a09f8:	080601d8 	.word	0x080601d8

080a09fc <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <HAL_NET_SetNetWatchDog+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601c0 	.word	0x080601c0

080a0a0c <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <inet_gethostbyname+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	080601c0 	.word	0x080601c0

080a0a1c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <LED_SetSignalingColor+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	685b      	ldr	r3, [r3, #4]
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	080201a8 	.word	0x080201a8

080a0a2c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <LED_Signaling_Start+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	689b      	ldr	r3, [r3, #8]
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080201a8 	.word	0x080201a8

080a0a3c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <LED_Signaling_Stop+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	68db      	ldr	r3, [r3, #12]
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080201a8 	.word	0x080201a8

080a0a4c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <LED_RGB_IsOverRidden+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	699b      	ldr	r3, [r3, #24]
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080201a8 	.word	0x080201a8

080a0a5c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <LED_On+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	69db      	ldr	r3, [r3, #28]
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080201a8 	.word	0x080201a8

080a0a6c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <log_message+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080201a8 	.word	0x080201a8

080a0a7c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <set_system_mode+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	685b      	ldr	r3, [r3, #4]
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601a4 	.word	0x080601a4

080a0a8c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <system_delay_ms+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	695b      	ldr	r3, [r3, #20]
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601a4 	.word	0x080601a4

080a0a9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b03      	ldr	r3, [pc, #12]	; (80a0aac <system_ctrl_set_app_request_handler+0x10>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0aa6:	9301      	str	r3, [sp, #4]
 80a0aa8:	bd08      	pop	{r3, pc}
 80a0aaa:	0000      	.short	0x0000
 80a0aac:	080601a4 	.word	0x080601a4

080a0ab0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b03      	ldr	r3, [pc, #12]	; (80a0ac0 <system_ctrl_set_result+0x10>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0aba:	9301      	str	r3, [sp, #4]
 80a0abc:	bd08      	pop	{r3, pc}
 80a0abe:	0000      	.short	0x0000
 80a0ac0:	080601a4 	.word	0x080601a4

080a0ac4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0ac4:	b508      	push	{r3, lr}
 80a0ac6:	4b02      	ldr	r3, [pc, #8]	; (80a0ad0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0ac8:	681b      	ldr	r3, [r3, #0]
 80a0aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0acc:	9301      	str	r3, [sp, #4]
 80a0ace:	bd08      	pop	{r3, pc}
 80a0ad0:	080601cc 	.word	0x080601cc

080a0ad4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ad4:	b508      	push	{r3, lr}
 80a0ad6:	4b02      	ldr	r3, [pc, #8]	; (80a0ae0 <network_connect+0xc>)
 80a0ad8:	681b      	ldr	r3, [r3, #0]
 80a0ada:	685b      	ldr	r3, [r3, #4]
 80a0adc:	9301      	str	r3, [sp, #4]
 80a0ade:	bd08      	pop	{r3, pc}
 80a0ae0:	080601c8 	.word	0x080601c8

080a0ae4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <network_connecting+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	689b      	ldr	r3, [r3, #8]
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601c8 	.word	0x080601c8

080a0af4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <network_disconnect+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	68db      	ldr	r3, [r3, #12]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601c8 	.word	0x080601c8

080a0b04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <network_ready+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	691b      	ldr	r3, [r3, #16]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601c8 	.word	0x080601c8

080a0b14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <network_on+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	695b      	ldr	r3, [r3, #20]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	080601c8 	.word	0x080601c8

080a0b24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <network_off+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	699b      	ldr	r3, [r3, #24]
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601c8 	.word	0x080601c8

080a0b34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <network_listen+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	69db      	ldr	r3, [r3, #28]
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601c8 	.word	0x080601c8

080a0b44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <network_listening+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	6a1b      	ldr	r3, [r3, #32]
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601c8 	.word	0x080601c8

080a0b54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <network_set_listen_timeout+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601c8 	.word	0x080601c8

080a0b64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <network_get_listen_timeout+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601c8 	.word	0x080601c8

080a0b74 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <network_is_on+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601c8 	.word	0x080601c8

080a0b84 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <network_is_off+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601c8 	.word	0x080601c8

080a0b94 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <malloc+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	681b      	ldr	r3, [r3, #0]
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601a0 	.word	0x080601a0

080a0ba4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <free+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	685b      	ldr	r3, [r3, #4]
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601a0 	.word	0x080601a0

080a0bb4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <realloc+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	689b      	ldr	r3, [r3, #8]
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601a0 	.word	0x080601a0

080a0bc4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <__errno+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601a0 	.word	0x080601a0

080a0bd4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <__assert_func+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601a0 	.word	0x080601a0

080a0be4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <newlib_impure_ptr_callback+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601a0 	.word	0x080601a0

080a0bf4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0bf4:	2100      	movs	r1, #0
 80a0bf6:	f7ff bf49 	b.w	80a0a8c <system_delay_ms>

080a0bfa <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0bfa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0bfc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0bfe:	4604      	mov	r4, r0
      if (_M_manager)
 80a0c00:	b113      	cbz	r3, 80a0c08 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0c02:	2203      	movs	r2, #3
 80a0c04:	4601      	mov	r1, r0
 80a0c06:	4798      	blx	r3
    }
 80a0c08:	4620      	mov	r0, r4
 80a0c0a:	bd10      	pop	{r4, pc}

080a0c0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0c0c:	4770      	bx	lr

080a0c0e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c10:	460e      	mov	r6, r1
 80a0c12:	2400      	movs	r4, #0
 80a0c14:	f100 0708 	add.w	r7, r0, #8
 80a0c18:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0c1a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0c1e:	220a      	movs	r2, #10
 80a0c20:	4630      	mov	r0, r6
 80a0c22:	f000 f92c 	bl	80a0e7e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0c26:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0c28:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0c2a:	d101      	bne.n	80a0c30 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0c2c:	4620      	mov	r0, r4
 80a0c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0c30:	2c00      	cmp	r4, #0
 80a0c32:	d0f2      	beq.n	80a0c1a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0c34:	212e      	movs	r1, #46	; 0x2e
 80a0c36:	4630      	mov	r0, r6
 80a0c38:	f000 f908 	bl	80a0e4c <_ZN5Print5printEc>
 80a0c3c:	4404      	add	r4, r0
 80a0c3e:	e7ec      	b.n	80a0c1a <_ZNK9IPAddress7printToER5Print+0xc>

080a0c40 <_ZN9IPAddressD0Ev>:
 80a0c40:	b510      	push	{r4, lr}
 80a0c42:	4604      	mov	r4, r0
 80a0c44:	2118      	movs	r1, #24
 80a0c46:	f000 ff8e 	bl	80a1b66 <_ZdlPvj>
 80a0c4a:	4620      	mov	r0, r4
 80a0c4c:	bd10      	pop	{r4, pc}
	...

080a0c50 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0c50:	b510      	push	{r4, lr}
 80a0c52:	4604      	mov	r4, r0
 80a0c54:	4b04      	ldr	r3, [pc, #16]	; (80a0c68 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0c56:	2211      	movs	r2, #17
 80a0c58:	2100      	movs	r1, #0
 80a0c5a:	f840 3b04 	str.w	r3, [r0], #4
 80a0c5e:	f001 f8b9 	bl	80a1dd4 <memset>
}
 80a0c62:	4620      	mov	r0, r4
 80a0c64:	bd10      	pop	{r4, pc}
 80a0c66:	bf00      	nop
 80a0c68:	080a2030 	.word	0x080a2030

080a0c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0c6c:	4603      	mov	r3, r0
 80a0c6e:	4a07      	ldr	r2, [pc, #28]	; (80a0c8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0c70:	b510      	push	{r4, lr}
 80a0c72:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0c76:	f101 0210 	add.w	r2, r1, #16
 80a0c7a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0c7e:	4291      	cmp	r1, r2
 80a0c80:	f843 4b04 	str.w	r4, [r3], #4
 80a0c84:	d1f9      	bne.n	80a0c7a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0c86:	780a      	ldrb	r2, [r1, #0]
 80a0c88:	701a      	strb	r2, [r3, #0]
}
 80a0c8a:	bd10      	pop	{r4, pc}
 80a0c8c:	080a2030 	.word	0x080a2030

080a0c90 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a0c90:	4a02      	ldr	r2, [pc, #8]	; (80a0c9c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a0c92:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0c96:	2204      	movs	r2, #4
 80a0c98:	7502      	strb	r2, [r0, #20]
}
 80a0c9a:	4770      	bx	lr
 80a0c9c:	080a2030 	.word	0x080a2030

080a0ca0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0ca0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0ca2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0ca6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0caa:	2304      	movs	r3, #4
 80a0cac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0cb0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0cb4:	6044      	str	r4, [r0, #4]
 80a0cb6:	7503      	strb	r3, [r0, #20]
}
 80a0cb8:	bd10      	pop	{r4, pc}
	...

080a0cbc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0cbc:	b513      	push	{r0, r1, r4, lr}
 80a0cbe:	4c04      	ldr	r4, [pc, #16]	; (80a0cd0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0cc0:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0cc2:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a0cc6:	9400      	str	r4, [sp, #0]
 80a0cc8:	f7ff ffea 	bl	80a0ca0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0ccc:	b002      	add	sp, #8
 80a0cce:	bd10      	pop	{r4, pc}
 80a0cd0:	080a2030 	.word	0x080a2030

080a0cd4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 80a0cd4:	b507      	push	{r0, r1, r2, lr}
 80a0cd6:	4b06      	ldr	r3, [pc, #24]	; (80a0cf0 <_ZN9IPAddressC1EPKh+0x1c>)
 80a0cd8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 80a0cda:	78cb      	ldrb	r3, [r1, #3]
 80a0cdc:	9300      	str	r3, [sp, #0]
 80a0cde:	788b      	ldrb	r3, [r1, #2]
 80a0ce0:	784a      	ldrb	r2, [r1, #1]
 80a0ce2:	7809      	ldrb	r1, [r1, #0]
 80a0ce4:	f7ff ffdc 	bl	80a0ca0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0ce8:	b003      	add	sp, #12
 80a0cea:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0cee:	bf00      	nop
 80a0cf0:	080a2030 	.word	0x080a2030

080a0cf4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0cf4:	4b01      	ldr	r3, [pc, #4]	; (80a0cfc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0cf6:	4a02      	ldr	r2, [pc, #8]	; (80a0d00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0cf8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0cfa:	4770      	bx	lr
 80a0cfc:	200000d8 	.word	0x200000d8
 80a0d00:	080a203c 	.word	0x080a203c

080a0d04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d04:	2300      	movs	r3, #0
 80a0d06:	6840      	ldr	r0, [r0, #4]
 80a0d08:	461a      	mov	r2, r3
 80a0d0a:	f7ff bee3 	b.w	80a0ad4 <network_connect>

080a0d0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d0e:	2200      	movs	r2, #0
 80a0d10:	2102      	movs	r1, #2
 80a0d12:	6840      	ldr	r0, [r0, #4]
 80a0d14:	f7ff beee 	b.w	80a0af4 <network_disconnect>

080a0d18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d18:	2200      	movs	r2, #0
 80a0d1a:	6840      	ldr	r0, [r0, #4]
 80a0d1c:	4611      	mov	r1, r2
 80a0d1e:	f7ff bee1 	b.w	80a0ae4 <network_connecting>

080a0d22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d22:	2200      	movs	r2, #0
 80a0d24:	6840      	ldr	r0, [r0, #4]
 80a0d26:	4611      	mov	r1, r2
 80a0d28:	f7ff beec 	b.w	80a0b04 <network_ready>

080a0d2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d2c:	2300      	movs	r3, #0
 80a0d2e:	6840      	ldr	r0, [r0, #4]
 80a0d30:	461a      	mov	r2, r3
 80a0d32:	4619      	mov	r1, r3
 80a0d34:	f7ff beee 	b.w	80a0b14 <network_on>

080a0d38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d38:	2300      	movs	r3, #0
 80a0d3a:	6840      	ldr	r0, [r0, #4]
 80a0d3c:	461a      	mov	r2, r3
 80a0d3e:	4619      	mov	r1, r3
 80a0d40:	f7ff bef0 	b.w	80a0b24 <network_off>

080a0d44 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0d44:	2100      	movs	r1, #0
 80a0d46:	6840      	ldr	r0, [r0, #4]
 80a0d48:	f7ff bf14 	b.w	80a0b74 <network_is_on>

080a0d4c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0d4c:	2100      	movs	r1, #0
 80a0d4e:	6840      	ldr	r0, [r0, #4]
 80a0d50:	f7ff bf18 	b.w	80a0b84 <network_is_off>

080a0d54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0d54:	2200      	movs	r2, #0
 80a0d56:	6840      	ldr	r0, [r0, #4]
 80a0d58:	f081 0101 	eor.w	r1, r1, #1
 80a0d5c:	f7ff beea 	b.w	80a0b34 <network_listen>

080a0d60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0d60:	2200      	movs	r2, #0
 80a0d62:	6840      	ldr	r0, [r0, #4]
 80a0d64:	f7ff bef6 	b.w	80a0b54 <network_set_listen_timeout>

080a0d68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0d68:	2200      	movs	r2, #0
 80a0d6a:	6840      	ldr	r0, [r0, #4]
 80a0d6c:	4611      	mov	r1, r2
 80a0d6e:	f7ff bef9 	b.w	80a0b64 <network_get_listen_timeout>

080a0d72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0d72:	2200      	movs	r2, #0
 80a0d74:	6840      	ldr	r0, [r0, #4]
 80a0d76:	4611      	mov	r1, r2
 80a0d78:	f7ff bee4 	b.w	80a0b44 <network_listening>

080a0d7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0d7c:	b570      	push	{r4, r5, r6, lr}
 80a0d7e:	4615      	mov	r5, r2
 80a0d80:	b08e      	sub	sp, #56	; 0x38
 80a0d82:	4604      	mov	r4, r0
    IPAddress addr;
 80a0d84:	a808      	add	r0, sp, #32
 80a0d86:	f7ff ff63 	bl	80a0c50 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0d8a:	2211      	movs	r2, #17
 80a0d8c:	2100      	movs	r1, #0
 80a0d8e:	a803      	add	r0, sp, #12
 80a0d90:	f001 f820 	bl	80a1dd4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0d94:	2600      	movs	r6, #0
 80a0d96:	4628      	mov	r0, r5
 80a0d98:	f001 f864 	bl	80a1e64 <strlen>
 80a0d9c:	4b0a      	ldr	r3, [pc, #40]	; (80a0dc8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0d9e:	9600      	str	r6, [sp, #0]
 80a0da0:	b281      	uxth	r1, r0
 80a0da2:	685b      	ldr	r3, [r3, #4]
 80a0da4:	4628      	mov	r0, r5
 80a0da6:	aa03      	add	r2, sp, #12
 80a0da8:	f7ff fe30 	bl	80a0a0c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0dac:	b130      	cbz	r0, 80a0dbc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0dae:	4631      	mov	r1, r6
 80a0db0:	4620      	mov	r0, r4
 80a0db2:	f7ff ff6d 	bl	80a0c90 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0db6:	4620      	mov	r0, r4
 80a0db8:	b00e      	add	sp, #56	; 0x38
 80a0dba:	bd70      	pop	{r4, r5, r6, pc}
 80a0dbc:	4620      	mov	r0, r4
 80a0dbe:	a903      	add	r1, sp, #12
 80a0dc0:	f7ff ff54 	bl	80a0c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0dc4:	e7f7      	b.n	80a0db6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0dc6:	bf00      	nop
 80a0dc8:	20000158 	.word	0x20000158

080a0dcc <_ZN5spark12NetworkClass4fromEm>:
}
 80a0dcc:	4a03      	ldr	r2, [pc, #12]	; (80a0ddc <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0dce:	4b04      	ldr	r3, [pc, #16]	; (80a0de0 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0dd0:	2804      	cmp	r0, #4
 80a0dd2:	bf14      	ite	ne
 80a0dd4:	4610      	movne	r0, r2
 80a0dd6:	4618      	moveq	r0, r3
 80a0dd8:	4770      	bx	lr
 80a0dda:	bf00      	nop
 80a0ddc:	200000dc 	.word	0x200000dc
 80a0de0:	20000158 	.word	0x20000158

080a0de4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0de4:	4b02      	ldr	r3, [pc, #8]	; (80a0df0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0de6:	4a03      	ldr	r2, [pc, #12]	; (80a0df4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0de8:	601a      	str	r2, [r3, #0]
 80a0dea:	2200      	movs	r2, #0
 80a0dec:	605a      	str	r2, [r3, #4]

} // spark
 80a0dee:	4770      	bx	lr
 80a0df0:	200000dc 	.word	0x200000dc
 80a0df4:	080a2048 	.word	0x080a2048

080a0df8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0dfa:	4606      	mov	r6, r0
 80a0dfc:	460d      	mov	r5, r1
  size_t n = 0;
 80a0dfe:	2400      	movs	r4, #0
 80a0e00:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0e02:	42bd      	cmp	r5, r7
 80a0e04:	d00c      	beq.n	80a0e20 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0e06:	6833      	ldr	r3, [r6, #0]
 80a0e08:	4630      	mov	r0, r6
 80a0e0a:	689b      	ldr	r3, [r3, #8]
 80a0e0c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0e10:	4798      	blx	r3
     if (chunk>=0)
 80a0e12:	1e03      	subs	r3, r0, #0
 80a0e14:	db01      	blt.n	80a0e1a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0e16:	441c      	add	r4, r3
  while (size--) {
 80a0e18:	e7f3      	b.n	80a0e02 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0e1a:	2c00      	cmp	r4, #0
 80a0e1c:	bf08      	it	eq
 80a0e1e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0e20:	4620      	mov	r0, r4
 80a0e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e24 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a0e24:	b570      	push	{r4, r5, r6, lr}
 80a0e26:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0e28:	460c      	mov	r4, r1
    }
 80a0e2a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0e2c:	b149      	cbz	r1, 80a0e42 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0e2e:	f001 f819 	bl	80a1e64 <strlen>
 80a0e32:	682b      	ldr	r3, [r5, #0]
 80a0e34:	4602      	mov	r2, r0
 80a0e36:	4621      	mov	r1, r4
 80a0e38:	4628      	mov	r0, r5
    }
 80a0e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0e3e:	68db      	ldr	r3, [r3, #12]
 80a0e40:	4718      	bx	r3
    }
 80a0e42:	bd70      	pop	{r4, r5, r6, pc}

080a0e44 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0e44:	b508      	push	{r3, lr}
  return write(str);
 80a0e46:	f7ff ffed 	bl	80a0e24 <_ZN5Print5writeEPKc>
}
 80a0e4a:	bd08      	pop	{r3, pc}

080a0e4c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0e4c:	6803      	ldr	r3, [r0, #0]
 80a0e4e:	689b      	ldr	r3, [r3, #8]
 80a0e50:	4718      	bx	r3

080a0e52 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0e52:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0e54:	210d      	movs	r1, #13
{
 80a0e56:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0e58:	f7ff fff8 	bl	80a0e4c <_ZN5Print5printEc>
  n += print('\n');
 80a0e5c:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0e5e:	4604      	mov	r4, r0
  n += print('\n');
 80a0e60:	4628      	mov	r0, r5
 80a0e62:	f7ff fff3 	bl	80a0e4c <_ZN5Print5printEc>
  return n;
}
 80a0e66:	4420      	add	r0, r4
 80a0e68:	bd38      	pop	{r3, r4, r5, pc}

080a0e6a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0e6a:	b538      	push	{r3, r4, r5, lr}
 80a0e6c:	4605      	mov	r5, r0
  return write(str);
 80a0e6e:	f7ff ffd9 	bl	80a0e24 <_ZN5Print5writeEPKc>
 80a0e72:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0e74:	4628      	mov	r0, r5
 80a0e76:	f7ff ffec 	bl	80a0e52 <_ZN5Print7printlnEv>
  return n;
}
 80a0e7a:	4420      	add	r0, r4
 80a0e7c:	bd38      	pop	{r3, r4, r5, pc}

080a0e7e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0e7e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0e80:	2a01      	cmp	r2, #1
 80a0e82:	bf98      	it	ls
 80a0e84:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0e86:	b530      	push	{r4, r5, lr}
 80a0e88:	b08b      	sub	sp, #44	; 0x2c
 80a0e8a:	460c      	mov	r4, r1
  *str = '\0';
 80a0e8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0e90:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0e92:	4625      	mov	r5, r4
 80a0e94:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0e98:	fb04 5312 	mls	r3, r4, r2, r5
 80a0e9c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0e9e:	2b09      	cmp	r3, #9
 80a0ea0:	bf94      	ite	ls
 80a0ea2:	3330      	addls	r3, #48	; 0x30
 80a0ea4:	3337      	addhi	r3, #55	; 0x37
 80a0ea6:	b2db      	uxtb	r3, r3
  } while(n);
 80a0ea8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0eaa:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0eae:	d9f0      	bls.n	80a0e92 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0eb0:	f7ff ffb8 	bl	80a0e24 <_ZN5Print5writeEPKc>
}
 80a0eb4:	b00b      	add	sp, #44	; 0x2c
 80a0eb6:	bd30      	pop	{r4, r5, pc}

080a0eb8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0eb8:	b510      	push	{r4, lr}
 80a0eba:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ebc:	f7ff fe9d 	bl	80a0bfa <_ZNSt14_Function_baseD1Ev>
 80a0ec0:	4620      	mov	r0, r4
 80a0ec2:	bd10      	pop	{r4, pc}

080a0ec4 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a0ec4:	b510      	push	{r4, lr}
 80a0ec6:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a0ec8:	f7ff fdc0 	bl	80a0a4c <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a0ecc:	4284      	cmp	r4, r0
 80a0ece:	d008      	beq.n	80a0ee2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a0ed0:	b11c      	cbz	r4, 80a0eda <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a0ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a0ed6:	f7ff bda9 	b.w	80a0a2c <LED_Signaling_Start>
}
 80a0eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a0ede:	f7ff bdad 	b.w	80a0a3c <LED_Signaling_Stop>
}
 80a0ee2:	bd10      	pop	{r4, pc}

080a0ee4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a0ee4:	b570      	push	{r4, r5, r6, lr}
 80a0ee6:	4605      	mov	r5, r0
 80a0ee8:	460e      	mov	r6, r1
 80a0eea:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a0eec:	f7ff fdae 	bl	80a0a4c <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a0ef0:	b150      	cbz	r0, 80a0f08 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a0ef2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a0ef6:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a0efa:	f7ff fd8f 	bl	80a0a1c <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
 80a0efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
 80a0f02:	20e7      	movs	r0, #231	; 0xe7
 80a0f04:	f7ff bdaa 	b.w	80a0a5c <LED_On>
}
 80a0f08:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0f0c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0f0c:	2300      	movs	r3, #0
 80a0f0e:	4803      	ldr	r0, [pc, #12]	; (80a0f1c <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
 80a0f10:	4a03      	ldr	r2, [pc, #12]	; (80a0f20 <_GLOBAL__sub_I_RGB+0x14>)
 80a0f12:	4904      	ldr	r1, [pc, #16]	; (80a0f24 <_GLOBAL__sub_I_RGB+0x18>)
 80a0f14:	6083      	str	r3, [r0, #8]
 80a0f16:	f000 be21 	b.w	80a1b5c <__aeabi_atexit>
 80a0f1a:	bf00      	nop
 80a0f1c:	200000e4 	.word	0x200000e4
 80a0f20:	2000006c 	.word	0x2000006c
 80a0f24:	080a0eb9 	.word	0x080a0eb9

080a0f28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0f28:	b510      	push	{r4, lr}
 80a0f2a:	4604      	mov	r4, r0
{
	free(buffer);
 80a0f2c:	6800      	ldr	r0, [r0, #0]
 80a0f2e:	f7ff fe39 	bl	80a0ba4 <free>
}
 80a0f32:	4620      	mov	r0, r4
 80a0f34:	bd10      	pop	{r4, pc}

080a0f36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0f36:	b510      	push	{r4, lr}
 80a0f38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0f3a:	6800      	ldr	r0, [r0, #0]
 80a0f3c:	b108      	cbz	r0, 80a0f42 <_ZN6String10invalidateEv+0xc>
 80a0f3e:	f7ff fe31 	bl	80a0ba4 <free>
	buffer = NULL;
 80a0f42:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0f44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0f48:	6023      	str	r3, [r4, #0]
}
 80a0f4a:	bd10      	pop	{r4, pc}

080a0f4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0f4c:	b538      	push	{r3, r4, r5, lr}
 80a0f4e:	4604      	mov	r4, r0
 80a0f50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0f52:	6800      	ldr	r0, [r0, #0]
 80a0f54:	3101      	adds	r1, #1
 80a0f56:	f7ff fe2d 	bl	80a0bb4 <realloc>
	if (newbuffer) {
 80a0f5a:	b110      	cbz	r0, 80a0f62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0f5c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0f60:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0f62:	bd38      	pop	{r3, r4, r5, pc}

080a0f64 <_ZN6String7reserveEj>:
{
 80a0f64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0f66:	6803      	ldr	r3, [r0, #0]
{
 80a0f68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0f6a:	b123      	cbz	r3, 80a0f76 <_ZN6String7reserveEj+0x12>
 80a0f6c:	6843      	ldr	r3, [r0, #4]
 80a0f6e:	428b      	cmp	r3, r1
 80a0f70:	d301      	bcc.n	80a0f76 <_ZN6String7reserveEj+0x12>
 80a0f72:	2001      	movs	r0, #1
}
 80a0f74:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0f76:	4620      	mov	r0, r4
 80a0f78:	f7ff ffe8 	bl	80a0f4c <_ZN6String12changeBufferEj>
 80a0f7c:	2800      	cmp	r0, #0
 80a0f7e:	d0f9      	beq.n	80a0f74 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0f80:	68a3      	ldr	r3, [r4, #8]
 80a0f82:	2b00      	cmp	r3, #0
 80a0f84:	d1f5      	bne.n	80a0f72 <_ZN6String7reserveEj+0xe>
 80a0f86:	6822      	ldr	r2, [r4, #0]
 80a0f88:	7013      	strb	r3, [r2, #0]
 80a0f8a:	e7f2      	b.n	80a0f72 <_ZN6String7reserveEj+0xe>

080a0f8c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0f8c:	b570      	push	{r4, r5, r6, lr}
 80a0f8e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0f90:	4611      	mov	r1, r2
{
 80a0f92:	4604      	mov	r4, r0
 80a0f94:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0f96:	f7ff ffe5 	bl	80a0f64 <_ZN6String7reserveEj>
 80a0f9a:	b920      	cbnz	r0, 80a0fa6 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0f9c:	4620      	mov	r0, r4
 80a0f9e:	f7ff ffca 	bl	80a0f36 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0fa2:	4620      	mov	r0, r4
 80a0fa4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0fa6:	462a      	mov	r2, r5
 80a0fa8:	4631      	mov	r1, r6
 80a0faa:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0fac:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0fae:	f000 ff03 	bl	80a1db8 <memcpy>
	buffer[len] = 0;
 80a0fb2:	2100      	movs	r1, #0
 80a0fb4:	6822      	ldr	r2, [r4, #0]
 80a0fb6:	68a3      	ldr	r3, [r4, #8]
 80a0fb8:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0fba:	e7f2      	b.n	80a0fa2 <_ZN6String4copyEPKcj+0x16>

080a0fbc <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a0fbc:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a0fbe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a0fc0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0fc2:	460d      	mov	r5, r1
	capacity = 0;
 80a0fc4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0fc8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0fca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a0fcc:	b139      	cbz	r1, 80a0fde <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a0fce:	4608      	mov	r0, r1
 80a0fd0:	f000 ff48 	bl	80a1e64 <strlen>
 80a0fd4:	4629      	mov	r1, r5
 80a0fd6:	4602      	mov	r2, r0
 80a0fd8:	4620      	mov	r0, r4
 80a0fda:	f7ff ffd7 	bl	80a0f8c <_ZN6String4copyEPKcj>
}
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	bd38      	pop	{r3, r4, r5, pc}

080a0fe2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0fe2:	b538      	push	{r3, r4, r5, lr}
 80a0fe4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0fe6:	460c      	mov	r4, r1
 80a0fe8:	b149      	cbz	r1, 80a0ffe <_ZN6StringaSEPKc+0x1c>
 80a0fea:	4608      	mov	r0, r1
 80a0fec:	f000 ff3a 	bl	80a1e64 <strlen>
 80a0ff0:	4621      	mov	r1, r4
 80a0ff2:	4602      	mov	r2, r0
 80a0ff4:	4628      	mov	r0, r5
 80a0ff6:	f7ff ffc9 	bl	80a0f8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0ffa:	4628      	mov	r0, r5
 80a0ffc:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a0ffe:	f7ff ff9a 	bl	80a0f36 <_ZN6String10invalidateEv>
 80a1002:	e7fa      	b.n	80a0ffa <_ZN6StringaSEPKc+0x18>

080a1004 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1004:	b570      	push	{r4, r5, r6, lr}
 80a1006:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1008:	460e      	mov	r6, r1
 80a100a:	b909      	cbnz	r1, 80a1010 <_ZN6String6concatEPKcj+0xc>
 80a100c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a100e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1010:	b16a      	cbz	r2, 80a102e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1012:	6884      	ldr	r4, [r0, #8]
 80a1014:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1016:	4621      	mov	r1, r4
 80a1018:	f7ff ffa4 	bl	80a0f64 <_ZN6String7reserveEj>
 80a101c:	2800      	cmp	r0, #0
 80a101e:	d0f5      	beq.n	80a100c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1020:	6828      	ldr	r0, [r5, #0]
 80a1022:	68ab      	ldr	r3, [r5, #8]
 80a1024:	4631      	mov	r1, r6
 80a1026:	4418      	add	r0, r3
 80a1028:	f000 ff14 	bl	80a1e54 <strcpy>
	len = newlen;
 80a102c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a102e:	2001      	movs	r0, #1
 80a1030:	e7ed      	b.n	80a100e <_ZN6String6concatEPKcj+0xa>

080a1032 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a1032:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a1034:	220a      	movs	r2, #10
{
 80a1036:	4604      	mov	r4, r0
 80a1038:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 80a103a:	4669      	mov	r1, sp
 80a103c:	f000 fcb0 	bl	80a19a0 <itoa>
	return concat(buf, strlen(buf));
 80a1040:	4668      	mov	r0, sp
 80a1042:	f000 ff0f 	bl	80a1e64 <strlen>
 80a1046:	4669      	mov	r1, sp
 80a1048:	4602      	mov	r2, r0
 80a104a:	4620      	mov	r0, r4
 80a104c:	f7ff ffda 	bl	80a1004 <_ZN6String6concatEPKcj>
}
 80a1050:	b002      	add	sp, #8
 80a1052:	bd10      	pop	{r4, pc}

080a1054 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a1054:	6800      	ldr	r0, [r0, #0]
 80a1056:	b108      	cbz	r0, 80a105c <_ZNK6String5toIntEv+0x8>
 80a1058:	f000 be9c 	b.w	80a1d94 <atol>
	return 0;
}
 80a105c:	4770      	bx	lr

080a105e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a105e:	b510      	push	{r4, lr}
 80a1060:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1062:	6800      	ldr	r0, [r0, #0]
 80a1064:	b118      	cbz	r0, 80a106e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
 80a1066:	f7ff fd9d 	bl	80a0ba4 <free>
            wakeupSource_ = nullptr;
 80a106a:	2300      	movs	r3, #0
 80a106c:	6023      	str	r3, [r4, #0]
        }
    }
 80a106e:	bd10      	pop	{r4, pc}

080a1070 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1070:	b510      	push	{r4, lr}
 80a1072:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a1074:	f7ff fff3 	bl	80a105e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
class SystemClass {
 80a1078:	4620      	mov	r0, r4
 80a107a:	bd10      	pop	{r4, pc}

080a107c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a107c:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a107e:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1080:	b510      	push	{r4, lr}
 80a1082:	4b08      	ldr	r3, [pc, #32]	; (80a10a4 <_GLOBAL__sub_I_System+0x28>)
 80a1084:	4c08      	ldr	r4, [pc, #32]	; (80a10a8 <_GLOBAL__sub_I_System+0x2c>)
 80a1086:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a1088:	4b08      	ldr	r3, [pc, #32]	; (80a10ac <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a108a:	e9c4 0000 	strd	r0, r0, [r4]
    SleepResult() {}
 80a108e:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1090:	f7ff fcf4 	bl	80a0a7c <set_system_mode>
SystemClass System;
 80a1094:	4620      	mov	r0, r4
 80a1096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a109a:	4a05      	ldr	r2, [pc, #20]	; (80a10b0 <_GLOBAL__sub_I_System+0x34>)
 80a109c:	4905      	ldr	r1, [pc, #20]	; (80a10b4 <_GLOBAL__sub_I_System+0x38>)
 80a109e:	f000 bd5d 	b.w	80a1b5c <__aeabi_atexit>
 80a10a2:	bf00      	nop
 80a10a4:	20000100 	.word	0x20000100
 80a10a8:	200000f4 	.word	0x200000f4
 80a10ac:	ffff0000 	.word	0xffff0000
 80a10b0:	2000006c 	.word	0x2000006c
 80a10b4:	080a1071 	.word	0x080a1071

080a10b8 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a10b8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a10ba:	6803      	ldr	r3, [r0, #0]
{
 80a10bc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a10c0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a10c2:	2201      	movs	r2, #1
 80a10c4:	f247 5330 	movw	r3, #30000	; 0x7530
 80a10c8:	f10d 0107 	add.w	r1, sp, #7
 80a10cc:	47a0      	blx	r4
}
 80a10ce:	b002      	add	sp, #8
 80a10d0:	bd10      	pop	{r4, pc}

080a10d2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a10d2:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a10d4:	6803      	ldr	r3, [r0, #0]
 80a10d6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a10d8:	f247 5330 	movw	r3, #30000	; 0x7530
 80a10dc:	46a4      	mov	ip, r4
}
 80a10de:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a10e0:	4760      	bx	ip

080a10e2 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a10e2:	b513      	push	{r0, r1, r4, lr}
 80a10e4:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a10e6:	6802      	ldr	r2, [r0, #0]
{
 80a10e8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a10ec:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a10ee:	f10d 0107 	add.w	r1, sp, #7
 80a10f2:	2201      	movs	r2, #1
 80a10f4:	47a0      	blx	r4
}
 80a10f6:	b002      	add	sp, #8
 80a10f8:	bd10      	pop	{r4, pc}

080a10fa <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a10fa:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a10fc:	6943      	ldr	r3, [r0, #20]
 80a10fe:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1100:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1104:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1108:	429a      	cmp	r2, r3
 80a110a:	d008      	beq.n	80a111e <_ZN9TCPClient4readEv+0x24>
 80a110c:	6963      	ldr	r3, [r4, #20]
 80a110e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1112:	1c51      	adds	r1, r2, #1
 80a1114:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a1118:	4413      	add	r3, r2
 80a111a:	7918      	ldrb	r0, [r3, #4]
}
 80a111c:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a111e:	6803      	ldr	r3, [r0, #0]
 80a1120:	691b      	ldr	r3, [r3, #16]
 80a1122:	4798      	blx	r3
 80a1124:	2800      	cmp	r0, #0
 80a1126:	d1f1      	bne.n	80a110c <_ZN9TCPClient4readEv+0x12>
 80a1128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a112c:	e7f6      	b.n	80a111c <_ZN9TCPClient4readEv+0x22>

080a112e <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a112e:	4770      	bx	lr

080a1130 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1130:	4770      	bx	lr
	...

080a1134 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1134:	b510      	push	{r4, lr}
 80a1136:	4604      	mov	r4, r0
	    ||
 80a1138:	4b06      	ldr	r3, [pc, #24]	; (80a1154 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a113a:	4608      	mov	r0, r1
	    ||
 80a113c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a113e:	f104 040c 	add.w	r4, r4, #12
 80a1142:	d004      	beq.n	80a114e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a1144:	f000 fd12 	bl	80a1b6c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 80a1148:	2800      	cmp	r0, #0
 80a114a:	bf08      	it	eq
 80a114c:	2400      	moveq	r4, #0
      }
 80a114e:	4620      	mov	r0, r4
 80a1150:	bd10      	pop	{r4, pc}
 80a1152:	bf00      	nop
 80a1154:	080a20b4 	.word	0x080a20b4

080a1158 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1158:	b510      	push	{r4, lr}
 80a115a:	4604      	mov	r4, r0
 80a115c:	21ac      	movs	r1, #172	; 0xac
 80a115e:	f000 fd02 	bl	80a1b66 <_ZdlPvj>
 80a1162:	4620      	mov	r0, r4
 80a1164:	bd10      	pop	{r4, pc}

080a1166 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80a1166:	21ac      	movs	r1, #172	; 0xac
 80a1168:	f000 bcfd 	b.w	80a1b66 <_ZdlPvj>

080a116c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a116c:	b538      	push	{r3, r4, r5, lr}
 80a116e:	4b0b      	ldr	r3, [pc, #44]	; (80a119c <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a1170:	6984      	ldr	r4, [r0, #24]
 80a1172:	4605      	mov	r5, r0
 80a1174:	6003      	str	r3, [r0, #0]
 80a1176:	b17c      	cbz	r4, 80a1198 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a1178:	6863      	ldr	r3, [r4, #4]
 80a117a:	3b01      	subs	r3, #1
 80a117c:	6063      	str	r3, [r4, #4]
 80a117e:	b95b      	cbnz	r3, 80a1198 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a1180:	6823      	ldr	r3, [r4, #0]
 80a1182:	4620      	mov	r0, r4
 80a1184:	689b      	ldr	r3, [r3, #8]
 80a1186:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1188:	68a3      	ldr	r3, [r4, #8]
 80a118a:	3b01      	subs	r3, #1
 80a118c:	60a3      	str	r3, [r4, #8]
 80a118e:	b91b      	cbnz	r3, 80a1198 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a1190:	6823      	ldr	r3, [r4, #0]
 80a1192:	4620      	mov	r0, r4
 80a1194:	68db      	ldr	r3, [r3, #12]
 80a1196:	4798      	blx	r3
 80a1198:	4628      	mov	r0, r5
 80a119a:	bd38      	pop	{r3, r4, r5, pc}
 80a119c:	080a20c4 	.word	0x080a20c4

080a11a0 <_ZN9TCPClientD0Ev>:
 80a11a0:	b510      	push	{r4, lr}
 80a11a2:	4604      	mov	r4, r0
 80a11a4:	f7ff ffe2 	bl	80a116c <_ZN9TCPClientD1Ev>
 80a11a8:	4620      	mov	r0, r4
 80a11aa:	211c      	movs	r1, #28
 80a11ac:	f000 fcdb 	bl	80a1b66 <_ZdlPvj>
 80a11b0:	4620      	mov	r0, r4
 80a11b2:	bd10      	pop	{r4, pc}

080a11b4 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a11b4:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a11b6:	4604      	mov	r4, r0
 80a11b8:	4606      	mov	r6, r0
      { return _M_ptr; }
 80a11ba:	694d      	ldr	r5, [r1, #20]
 80a11bc:	4b04      	ldr	r3, [pc, #16]	; (80a11d0 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a11be:	358c      	adds	r5, #140	; 0x8c
 80a11c0:	f844 3b04 	str.w	r3, [r4], #4
 80a11c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a11c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a11c8:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a11ca:	4630      	mov	r0, r6
 80a11cc:	7023      	strb	r3, [r4, #0]
 80a11ce:	bd70      	pop	{r4, r5, r6, pc}
 80a11d0:	080a2030 	.word	0x080a2030

080a11d4 <_ZN9TCPClient4peekEv>:
{
 80a11d4:	b510      	push	{r4, lr}
 80a11d6:	6943      	ldr	r3, [r0, #20]
 80a11d8:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a11da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a11de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a11e2:	429a      	cmp	r2, r3
 80a11e4:	d005      	beq.n	80a11f2 <_ZN9TCPClient4peekEv+0x1e>
 80a11e6:	6963      	ldr	r3, [r4, #20]
 80a11e8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a11ec:	4413      	add	r3, r2
 80a11ee:	7918      	ldrb	r0, [r3, #4]
}
 80a11f0:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a11f2:	6803      	ldr	r3, [r0, #0]
 80a11f4:	691b      	ldr	r3, [r3, #16]
 80a11f6:	4798      	blx	r3
 80a11f8:	2800      	cmp	r0, #0
 80a11fa:	d1f4      	bne.n	80a11e6 <_ZN9TCPClient4peekEv+0x12>
 80a11fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1200:	e7f6      	b.n	80a11f0 <_ZN9TCPClient4peekEv+0x1c>

080a1202 <_ZN9TCPClient4readEPhj>:
{
 80a1202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1204:	6943      	ldr	r3, [r0, #20]
 80a1206:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a1208:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a120c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a1210:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a1212:	429a      	cmp	r2, r3
{
 80a1214:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a1216:	d016      	beq.n	80a1246 <_ZN9TCPClient4readEPhj+0x44>
 80a1218:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a121a:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a121c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1220:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a1224:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1226:	42bc      	cmp	r4, r7
 80a1228:	bf28      	it	cs
 80a122a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a122c:	3304      	adds	r3, #4
 80a122e:	4622      	mov	r2, r4
 80a1230:	4419      	add	r1, r3
 80a1232:	f000 fdc1 	bl	80a1db8 <memcpy>
 80a1236:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1238:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a123c:	4423      	add	r3, r4
 80a123e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a1242:	4620      	mov	r0, r4
 80a1244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a1246:	6803      	ldr	r3, [r0, #0]
 80a1248:	691b      	ldr	r3, [r3, #16]
 80a124a:	4798      	blx	r3
 80a124c:	2800      	cmp	r0, #0
 80a124e:	d1e3      	bne.n	80a1218 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a1250:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1254:	e7f5      	b.n	80a1242 <_ZN9TCPClient4readEPhj+0x40>

080a1256 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a1256:	2300      	movs	r3, #0
 80a1258:	6942      	ldr	r2, [r0, #20]
 80a125a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a125e:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1260:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a1264:	4770      	bx	lr
	...

080a1268 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a1268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a126c:	461f      	mov	r7, r3
    stop();
 80a126e:	6803      	ldr	r3, [r0, #0]
{
 80a1270:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a1272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1274:	4605      	mov	r5, r0
 80a1276:	460c      	mov	r4, r1
 80a1278:	4616      	mov	r6, r2
    stop();
 80a127a:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a127c:	4638      	mov	r0, r7
 80a127e:	f7ff fda5 	bl	80a0dcc <_ZN5spark12NetworkClass4fromEm>
 80a1282:	6803      	ldr	r3, [r0, #0]
 80a1284:	68db      	ldr	r3, [r3, #12]
 80a1286:	4798      	blx	r3
 80a1288:	2800      	cmp	r0, #0
 80a128a:	d054      	beq.n	80a1336 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a128c:	4633      	mov	r3, r6
 80a128e:	2206      	movs	r2, #6
 80a1290:	2101      	movs	r1, #1
 80a1292:	2002      	movs	r0, #2
 80a1294:	9700      	str	r7, [sp, #0]
 80a1296:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a129a:	f7ff faff 	bl	80a089c <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a129e:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a12a0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a12a4:	f04f 0800 	mov.w	r8, #0
 80a12a8:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a12ac:	696b      	ldr	r3, [r5, #20]
 80a12ae:	2001      	movs	r0, #1
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	4923      	ldr	r1, [pc, #140]	; (80a1340 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	4b23      	ldr	r3, [pc, #140]	; (80a1344 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a12b8:	aa02      	add	r2, sp, #8
 80a12ba:	9300      	str	r3, [sp, #0]
 80a12bc:	4643      	mov	r3, r8
 80a12be:	f7ff fbd5 	bl	80a0a6c <log_message>
          if (socket_handle_valid(d_->sock))
 80a12c2:	696b      	ldr	r3, [r5, #20]
 80a12c4:	6818      	ldr	r0, [r3, #0]
 80a12c6:	f7ff fae1 	bl	80a088c <socket_handle_valid>
 80a12ca:	2800      	cmp	r0, #0
 80a12cc:	d033      	beq.n	80a1336 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a12ce:	4628      	mov	r0, r5
 80a12d0:	f7ff ffc1 	bl	80a1256 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a12d4:	2302      	movs	r3, #2
 80a12d6:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a12da:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a12dc:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a12de:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a12e2:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a12e4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a12e8:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a12ec:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a12ee:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a12f2:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a12f6:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a12fa:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a12fe:	f7ff fb7d 	bl	80a09fc <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1302:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1304:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1306:	2210      	movs	r2, #16
 80a1308:	6818      	ldr	r0, [r3, #0]
 80a130a:	a902      	add	r1, sp, #8
 80a130c:	f7ff face 	bl	80a08ac <socket_connect>
 80a1310:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a1312:	4630      	mov	r0, r6
 80a1314:	f7ff fb72 	bl	80a09fc <HAL_NET_SetNetWatchDog>
 80a1318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a131a:	696e      	ldr	r6, [r5, #20]
 80a131c:	368c      	adds	r6, #140	; 0x8c
 80a131e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a1320:	6823      	ldr	r3, [r4, #0]
 80a1322:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a1324:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a1326:	f1b9 0f00 	cmp.w	r9, #0
 80a132a:	d007      	beq.n	80a133c <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a132c:	682b      	ldr	r3, [r5, #0]
 80a132e:	4628      	mov	r0, r5
 80a1330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1332:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1334:	4640      	mov	r0, r8
}
 80a1336:	b00b      	add	sp, #44	; 0x2c
 80a1338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a133c:	2001      	movs	r0, #1
 80a133e:	e7fa      	b.n	80a1336 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a1340:	080a207c 	.word	0x080a207c
 80a1344:	080a2083 	.word	0x080a2083

080a1348 <_ZN9TCPClient9availableEv>:
{
 80a1348:	b538      	push	{r3, r4, r5, lr}
 80a134a:	6942      	ldr	r2, [r0, #20]
 80a134c:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a134e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1352:	b12b      	cbz	r3, 80a1360 <_ZN9TCPClient9availableEv+0x18>
 80a1354:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1358:	429a      	cmp	r2, r3
 80a135a:	d101      	bne.n	80a1360 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a135c:	f7ff ff7b 	bl	80a1256 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1360:	6920      	ldr	r0, [r4, #16]
 80a1362:	f7ff fd33 	bl	80a0dcc <_ZN5spark12NetworkClass4fromEm>
 80a1366:	6803      	ldr	r3, [r0, #0]
 80a1368:	68db      	ldr	r3, [r3, #12]
 80a136a:	4798      	blx	r3
 80a136c:	b1f8      	cbz	r0, 80a13ae <_ZN9TCPClient9availableEv+0x66>
 80a136e:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a1370:	6818      	ldr	r0, [r3, #0]
 80a1372:	f7ff fa8b 	bl	80a088c <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1376:	b1d0      	cbz	r0, 80a13ae <_ZN9TCPClient9availableEv+0x66>
 80a1378:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a137a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a137e:	297f      	cmp	r1, #127	; 0x7f
 80a1380:	d815      	bhi.n	80a13ae <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1382:	1d05      	adds	r5, r0, #4
 80a1384:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1388:	2300      	movs	r3, #0
 80a138a:	6800      	ldr	r0, [r0, #0]
 80a138c:	4429      	add	r1, r5
 80a138e:	f7ff fa95 	bl	80a08bc <socket_receive>
            if (ret > 0)
 80a1392:	2800      	cmp	r0, #0
 80a1394:	dd0b      	ble.n	80a13ae <_ZN9TCPClient9availableEv+0x66>
 80a1396:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a1398:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a139c:	b90a      	cbnz	r2, 80a13a2 <_ZN9TCPClient9availableEv+0x5a>
 80a139e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a13a2:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a13a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a13a8:	4410      	add	r0, r2
 80a13aa:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a13ae:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a13b0:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a13b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a13b8:	1ac0      	subs	r0, r0, r3
 80a13ba:	bd38      	pop	{r3, r4, r5, pc}

080a13bc <_ZN9TCPClient4stopEv>:
{
 80a13bc:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a13be:	6943      	ldr	r3, [r0, #20]
{
 80a13c0:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a13c2:	6818      	ldr	r0, [r3, #0]
 80a13c4:	f7ff fa62 	bl	80a088c <socket_handle_valid>
  if (isOpen(d_->sock))
 80a13c8:	b118      	cbz	r0, 80a13d2 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a13ca:	6963      	ldr	r3, [r4, #20]
 80a13cc:	6818      	ldr	r0, [r3, #0]
 80a13ce:	f7ff fa7d 	bl	80a08cc <socket_close>
 80a13d2:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a13d4:	f7ff fa82 	bl	80a08dc <socket_handle_invalid>
 80a13d8:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a13da:	6960      	ldr	r0, [r4, #20]
 80a13dc:	2211      	movs	r2, #17
 80a13de:	2100      	movs	r1, #0
 80a13e0:	308c      	adds	r0, #140	; 0x8c
 80a13e2:	f000 fcf7 	bl	80a1dd4 <memset>
  flush_buffer();
 80a13e6:	4620      	mov	r0, r4
}
 80a13e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a13ec:	f7ff bf33 	b.w	80a1256 <_ZN9TCPClient12flush_bufferEv>

080a13f0 <_ZN9TCPClient6statusEv>:
{
 80a13f0:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a13f2:	6943      	ldr	r3, [r0, #20]
{
 80a13f4:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a13f6:	6818      	ldr	r0, [r3, #0]
 80a13f8:	f7ff fa48 	bl	80a088c <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a13fc:	b908      	cbnz	r0, 80a1402 <_ZN9TCPClient6statusEv+0x12>
 80a13fe:	2000      	movs	r0, #0
}
 80a1400:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1402:	6920      	ldr	r0, [r4, #16]
 80a1404:	f7ff fce2 	bl	80a0dcc <_ZN5spark12NetworkClass4fromEm>
 80a1408:	6803      	ldr	r3, [r0, #0]
 80a140a:	68db      	ldr	r3, [r3, #12]
 80a140c:	4798      	blx	r3
 80a140e:	2800      	cmp	r0, #0
 80a1410:	d0f5      	beq.n	80a13fe <_ZN9TCPClient6statusEv+0xe>
 80a1412:	6963      	ldr	r3, [r4, #20]
 80a1414:	6818      	ldr	r0, [r3, #0]
 80a1416:	f7ff fa31 	bl	80a087c <socket_active_status>
 80a141a:	fab0 f080 	clz	r0, r0
 80a141e:	0940      	lsrs	r0, r0, #5
 80a1420:	e7ee      	b.n	80a1400 <_ZN9TCPClient6statusEv+0x10>

080a1422 <_ZN9TCPClientcvbEv>:
{
 80a1422:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1424:	f7ff ffe4 	bl	80a13f0 <_ZN9TCPClient6statusEv>
}
 80a1428:	3800      	subs	r0, #0
 80a142a:	bf18      	it	ne
 80a142c:	2001      	movne	r0, #1
 80a142e:	bd08      	pop	{r3, pc}

080a1430 <_ZN9TCPClient5writeEPKhjm>:
{
 80a1430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a1434:	2700      	movs	r7, #0
 80a1436:	6047      	str	r7, [r0, #4]
 80a1438:	4604      	mov	r4, r0
 80a143a:	460d      	mov	r5, r1
 80a143c:	4616      	mov	r6, r2
 80a143e:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1440:	f7ff ffd6 	bl	80a13f0 <_ZN9TCPClient6statusEv>
 80a1444:	b170      	cbz	r0, 80a1464 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a1446:	e9cd 8700 	strd	r8, r7, [sp]
 80a144a:	6960      	ldr	r0, [r4, #20]
 80a144c:	463b      	mov	r3, r7
 80a144e:	4632      	mov	r2, r6
 80a1450:	4629      	mov	r1, r5
 80a1452:	6800      	ldr	r0, [r0, #0]
 80a1454:	f7ff fa4a 	bl	80a08ec <socket_send_ex>
    if (ret < 0) {
 80a1458:	2800      	cmp	r0, #0
 80a145a:	da00      	bge.n	80a145e <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a145c:	6060      	str	r0, [r4, #4]
}
 80a145e:	b002      	add	sp, #8
 80a1460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1468:	e7f8      	b.n	80a145c <_ZN9TCPClient5writeEPKhjm+0x2c>

080a146a <_ZN9TCPClient9connectedEv>:
{
 80a146a:	b570      	push	{r4, r5, r6, lr}
 80a146c:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a146e:	f7ff ffbf 	bl	80a13f0 <_ZN9TCPClient6statusEv>
 80a1472:	b9e8      	cbnz	r0, 80a14b0 <_ZN9TCPClient9connectedEv+0x46>
 80a1474:	696b      	ldr	r3, [r5, #20]
 80a1476:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a147a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a147e:	4291      	cmp	r1, r2
 80a1480:	d116      	bne.n	80a14b0 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a1482:	6818      	ldr	r0, [r3, #0]
 80a1484:	f7ff fa02 	bl	80a088c <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1488:	b908      	cbnz	r0, 80a148e <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a148a:	2000      	movs	r0, #0
}
 80a148c:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a148e:	696b      	ldr	r3, [r5, #20]
 80a1490:	6818      	ldr	r0, [r3, #0]
 80a1492:	f7ff f9f3 	bl	80a087c <socket_active_status>
 80a1496:	2801      	cmp	r0, #1
 80a1498:	4604      	mov	r4, r0
 80a149a:	d1f6      	bne.n	80a148a <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a149c:	682b      	ldr	r3, [r5, #0]
 80a149e:	4628      	mov	r0, r5
 80a14a0:	691b      	ldr	r3, [r3, #16]
 80a14a2:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a14a4:	b930      	cbnz	r0, 80a14b4 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a14a6:	682b      	ldr	r3, [r5, #0]
 80a14a8:	4628      	mov	r0, r5
 80a14aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a14ac:	4798      	blx	r3
 80a14ae:	e7ec      	b.n	80a148a <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a14b0:	2001      	movs	r0, #1
 80a14b2:	e7eb      	b.n	80a148c <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a14b4:	4620      	mov	r0, r4
 80a14b6:	e7e9      	b.n	80a148c <_ZN9TCPClient9connectedEv+0x22>

080a14b8 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a14b8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a14ba:	b510      	push	{r4, lr}
 80a14bc:	4604      	mov	r4, r0
          total(0) {
 80a14be:	6001      	str	r1, [r0, #0]
 80a14c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a14c4:	3088      	adds	r0, #136	; 0x88
 80a14c6:	f7ff fbc3 	bl	80a0c50 <_ZN9IPAddressC1Ev>
}
 80a14ca:	4620      	mov	r0, r4
 80a14cc:	bd10      	pop	{r4, pc}
	...

080a14d0 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a14d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a14d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a14d6:	2300      	movs	r3, #0
 80a14d8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a14dc:	4a0d      	ldr	r2, [pc, #52]	; (80a1514 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a14de:	6103      	str	r3, [r0, #16]
 80a14e0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a14e2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a14e4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a14e6:	20ac      	movs	r0, #172	; 0xac
 80a14e8:	460e      	mov	r6, r1
 80a14ea:	f7fe fdd4 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a14ee:	1e05      	subs	r5, r0, #0
 80a14f0:	f105 070c 	add.w	r7, r5, #12
 80a14f4:	d008      	beq.n	80a1508 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a14f6:	2301      	movs	r3, #1
 80a14f8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a14fc:	4b06      	ldr	r3, [pc, #24]	; (80a1518 <_ZN9TCPClientC1Em+0x48>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a14fe:	4631      	mov	r1, r6
 80a1500:	4638      	mov	r0, r7
 80a1502:	602b      	str	r3, [r5, #0]
 80a1504:	f7ff ffd8 	bl	80a14b8 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a1508:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a150a:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a150e:	f7ff fea2 	bl	80a1256 <_ZN9TCPClient12flush_bufferEv>
}
 80a1512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1514:	080a20c4 	.word	0x080a20c4
 80a1518:	080a20a0 	.word	0x080a20a0

080a151c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a151c:	b510      	push	{r4, lr}
 80a151e:	4604      	mov	r4, r0
 80a1520:	f7ff f9dc 	bl	80a08dc <socket_handle_invalid>
 80a1524:	4601      	mov	r1, r0
 80a1526:	4620      	mov	r0, r4
 80a1528:	f7ff ffd2 	bl	80a14d0 <_ZN9TCPClientC1Em>
}
 80a152c:	4620      	mov	r0, r4
 80a152e:	bd10      	pop	{r4, pc}

080a1530 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a1530:	b510      	push	{r4, lr}
 80a1532:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1534:	6800      	ldr	r0, [r0, #0]
 80a1536:	f7ff f9a9 	bl	80a088c <socket_handle_valid>
 80a153a:	b110      	cbz	r0, 80a1542 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a153c:	6820      	ldr	r0, [r4, #0]
 80a153e:	f7ff f9c5 	bl	80a08cc <socket_close>
    }
}
 80a1542:	4620      	mov	r0, r4
 80a1544:	bd10      	pop	{r4, pc}

080a1546 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80a1546:	300c      	adds	r0, #12
 80a1548:	f7ff bff2 	b.w	80a1530 <_ZN9TCPClient4DataD1Ev>

080a154c <_ZN9TCPClient7connectEPKctm>:
{
 80a154c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1550:	461f      	mov	r7, r3
    stop();
 80a1552:	6803      	ldr	r3, [r0, #0]
{
 80a1554:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1558:	4606      	mov	r6, r0
 80a155a:	460d      	mov	r5, r1
 80a155c:	4690      	mov	r8, r2
    stop();
 80a155e:	4798      	blx	r3
    if (Network.ready())
 80a1560:	4813      	ldr	r0, [pc, #76]	; (80a15b0 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1562:	f7ff fbde 	bl	80a0d22 <_ZN5spark12NetworkClass5readyEv>
 80a1566:	b1f0      	cbz	r0, 80a15a6 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a1568:	a802      	add	r0, sp, #8
 80a156a:	f7ff fb71 	bl	80a0c50 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a156e:	4628      	mov	r0, r5
 80a1570:	f000 fc78 	bl	80a1e64 <strlen>
 80a1574:	2400      	movs	r4, #0
 80a1576:	b281      	uxth	r1, r0
 80a1578:	463b      	mov	r3, r7
 80a157a:	4628      	mov	r0, r5
 80a157c:	9400      	str	r4, [sp, #0]
 80a157e:	aa03      	add	r2, sp, #12
 80a1580:	f7ff fa44 	bl	80a0a0c <inet_gethostbyname>
 80a1584:	b990      	cbnz	r0, 80a15ac <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a1586:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a1588:	ad09      	add	r5, sp, #36	; 0x24
 80a158a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a158e:	4b09      	ldr	r3, [pc, #36]	; (80a15b4 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1590:	ac03      	add	r4, sp, #12
 80a1592:	9308      	str	r3, [sp, #32]
 80a1594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1598:	6823      	ldr	r3, [r4, #0]
 80a159a:	4642      	mov	r2, r8
 80a159c:	702b      	strb	r3, [r5, #0]
 80a159e:	4630      	mov	r0, r6
 80a15a0:	463b      	mov	r3, r7
 80a15a2:	a908      	add	r1, sp, #32
 80a15a4:	47c8      	blx	r9
}
 80a15a6:	b00f      	add	sp, #60	; 0x3c
 80a15a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	e7fa      	b.n	80a15a6 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a15b0:	200000dc 	.word	0x200000dc
 80a15b4:	080a2030 	.word	0x080a2030

080a15b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a15b8:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a15ba:	681a      	ldr	r2, [r3, #0]
 80a15bc:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a15be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a15c0:	4770      	bx	lr
 80a15c2:	bf00      	nop
 80a15c4:	20000004 	.word	0x20000004
 80a15c8:	20000104 	.word	0x20000104

080a15cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a15cc:	4770      	bx	lr

080a15ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a15ce:	7441      	strb	r1, [r0, #17]
}
 80a15d0:	4770      	bx	lr

080a15d2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a15d2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a15d4:	7c00      	ldrb	r0, [r0, #16]
 80a15d6:	f7ff f9c1 	bl	80a095c <hal_usart_available_data_for_write>
}
 80a15da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a15de:	bd08      	pop	{r3, pc}

080a15e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a15e0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a15e2:	7c00      	ldrb	r0, [r0, #16]
 80a15e4:	f7ff f99a 	bl	80a091c <hal_usart_available>
}
 80a15e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a15ec:	bd08      	pop	{r3, pc}

080a15ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a15ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a15f0:	7c00      	ldrb	r0, [r0, #16]
 80a15f2:	f7ff f9a3 	bl	80a093c <hal_usart_peek>
}
 80a15f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a15fa:	bd08      	pop	{r3, pc}

080a15fc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a15fc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a15fe:	7c00      	ldrb	r0, [r0, #16]
 80a1600:	f7ff f994 	bl	80a092c <hal_usart_read>
}
 80a1604:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1608:	bd08      	pop	{r3, pc}

080a160a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a160a:	7c00      	ldrb	r0, [r0, #16]
 80a160c:	f7ff b99e 	b.w	80a094c <hal_usart_flush>

080a1610 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1610:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1612:	7c46      	ldrb	r6, [r0, #17]
{
 80a1614:	4604      	mov	r4, r0
 80a1616:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1618:	b12e      	cbz	r6, 80a1626 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a161a:	4629      	mov	r1, r5
 80a161c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a161e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1622:	f7ff b973 	b.w	80a090c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1626:	7c00      	ldrb	r0, [r0, #16]
 80a1628:	f7ff f998 	bl	80a095c <hal_usart_available_data_for_write>
 80a162c:	2800      	cmp	r0, #0
 80a162e:	dcf4      	bgt.n	80a161a <_ZN11USARTSerial5writeEh+0xa>
}
 80a1630:	4630      	mov	r0, r6
 80a1632:	bd70      	pop	{r4, r5, r6, pc}

080a1634 <_ZN11USARTSerialD0Ev>:
 80a1634:	b510      	push	{r4, lr}
 80a1636:	4604      	mov	r4, r0
 80a1638:	2114      	movs	r1, #20
 80a163a:	f000 fa94 	bl	80a1b66 <_ZdlPvj>
 80a163e:	4620      	mov	r0, r4
 80a1640:	bd10      	pop	{r4, pc}
	...

080a1644 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1644:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1648:	b510      	push	{r4, lr}
 80a164a:	4604      	mov	r4, r0
 80a164c:	4608      	mov	r0, r1
 80a164e:	4611      	mov	r1, r2
 80a1650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1654:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1658:	4a04      	ldr	r2, [pc, #16]	; (80a166c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a165a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a165c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a165e:	2201      	movs	r2, #1
 80a1660:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1662:	461a      	mov	r2, r3
 80a1664:	f7ff f94a 	bl	80a08fc <hal_usart_init>
}
 80a1668:	4620      	mov	r0, r4
 80a166a:	bd10      	pop	{r4, pc}
 80a166c:	080a212c 	.word	0x080a212c

080a1670 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a1670:	2300      	movs	r3, #0
 80a1672:	7c00      	ldrb	r0, [r0, #16]
 80a1674:	f7ff b97a 	b.w	80a096c <hal_usart_begin_config>

080a1678 <_ZN11USARTSerialcvbEv>:
  return hal_usart_write_nine_bits(_serial, c);
}

USARTSerial::operator bool() {
  return true;
}
 80a1678:	2001      	movs	r0, #1
 80a167a:	4770      	bx	lr

080a167c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a167e:	4e1a      	ldr	r6, [pc, #104]	; (80a16e8 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1680:	6835      	ldr	r5, [r6, #0]
 80a1682:	b94d      	cbnz	r5, 80a1698 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a1684:	2084      	movs	r0, #132	; 0x84
 80a1686:	f7fe fd06 	bl	80a0096 <_Znwj>
 80a168a:	4604      	mov	r4, r0
 80a168c:	b118      	cbz	r0, 80a1696 <_Z22__fetch_global_Serial1v+0x1a>
 80a168e:	2284      	movs	r2, #132	; 0x84
 80a1690:	4629      	mov	r1, r5
 80a1692:	f000 fb9f 	bl	80a1dd4 <memset>
 80a1696:	6034      	str	r4, [r6, #0]
  }
  if (!serial1_tx_buffer) {
 80a1698:	4f14      	ldr	r7, [pc, #80]	; (80a16ec <_Z22__fetch_global_Serial1v+0x70>)
 80a169a:	683d      	ldr	r5, [r7, #0]
 80a169c:	b94d      	cbnz	r5, 80a16b2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a169e:	2084      	movs	r0, #132	; 0x84
 80a16a0:	f7fe fcf9 	bl	80a0096 <_Znwj>
 80a16a4:	4604      	mov	r4, r0
 80a16a6:	b118      	cbz	r0, 80a16b0 <_Z22__fetch_global_Serial1v+0x34>
 80a16a8:	2284      	movs	r2, #132	; 0x84
 80a16aa:	4629      	mov	r1, r5
 80a16ac:	f000 fb92 	bl	80a1dd4 <memset>
 80a16b0:	603c      	str	r4, [r7, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a16b2:	4d0f      	ldr	r5, [pc, #60]	; (80a16f0 <_Z22__fetch_global_Serial1v+0x74>)
 80a16b4:	7829      	ldrb	r1, [r5, #0]
 80a16b6:	f3bf 8f5b 	dmb	ish
 80a16ba:	f011 0401 	ands.w	r4, r1, #1
 80a16be:	d111      	bne.n	80a16e4 <_Z22__fetch_global_Serial1v+0x68>
 80a16c0:	4628      	mov	r0, r5
 80a16c2:	f7fe fcf0 	bl	80a00a6 <__cxa_guard_acquire>
 80a16c6:	b168      	cbz	r0, 80a16e4 <_Z22__fetch_global_Serial1v+0x68>
 80a16c8:	4621      	mov	r1, r4
 80a16ca:	6832      	ldr	r2, [r6, #0]
 80a16cc:	683b      	ldr	r3, [r7, #0]
 80a16ce:	4809      	ldr	r0, [pc, #36]	; (80a16f4 <_Z22__fetch_global_Serial1v+0x78>)
 80a16d0:	f7ff ffb8 	bl	80a1644 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a16d4:	4628      	mov	r0, r5
 80a16d6:	f7fe fceb 	bl	80a00b0 <__cxa_guard_release>
 80a16da:	4a07      	ldr	r2, [pc, #28]	; (80a16f8 <_Z22__fetch_global_Serial1v+0x7c>)
 80a16dc:	4907      	ldr	r1, [pc, #28]	; (80a16fc <_Z22__fetch_global_Serial1v+0x80>)
 80a16de:	4805      	ldr	r0, [pc, #20]	; (80a16f4 <_Z22__fetch_global_Serial1v+0x78>)
 80a16e0:	f000 fa3c 	bl	80a1b5c <__aeabi_atexit>
#endif
	return serial1;
}
 80a16e4:	4803      	ldr	r0, [pc, #12]	; (80a16f4 <_Z22__fetch_global_Serial1v+0x78>)
 80a16e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a16e8:	2000010c 	.word	0x2000010c
 80a16ec:	20000110 	.word	0x20000110
 80a16f0:	20000108 	.word	0x20000108
 80a16f4:	20000114 	.word	0x20000114
 80a16f8:	2000006c 	.word	0x2000006c
 80a16fc:	080a15cd 	.word	0x080a15cd

080a1700 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1700:	7441      	strb	r1, [r0, #17]
}
 80a1702:	4770      	bx	lr

080a1704 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1704:	4770      	bx	lr

080a1706 <_ZN9USBSerial4readEv>:
{
 80a1706:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1708:	2100      	movs	r1, #0
 80a170a:	7c00      	ldrb	r0, [r0, #16]
 80a170c:	f7ff f956 	bl	80a09bc <HAL_USB_USART_Receive_Data>
}
 80a1710:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1714:	bd08      	pop	{r3, pc}

080a1716 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a1716:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1718:	2101      	movs	r1, #1
 80a171a:	7c00      	ldrb	r0, [r0, #16]
 80a171c:	f7ff f94e 	bl	80a09bc <HAL_USB_USART_Receive_Data>
}
 80a1720:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1724:	bd08      	pop	{r3, pc}

080a1726 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1726:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1728:	7c00      	ldrb	r0, [r0, #16]
 80a172a:	f7ff f93f 	bl	80a09ac <HAL_USB_USART_Available_Data_For_Write>
}
 80a172e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1732:	bd08      	pop	{r3, pc}

080a1734 <_ZN9USBSerial9availableEv>:
{
 80a1734:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1736:	7c00      	ldrb	r0, [r0, #16]
 80a1738:	f7ff f930 	bl	80a099c <HAL_USB_USART_Available_Data>
}
 80a173c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1740:	bd08      	pop	{r3, pc}

080a1742 <_ZN9USBSerial5writeEh>:
{
 80a1742:	b538      	push	{r3, r4, r5, lr}
 80a1744:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1746:	7c00      	ldrb	r0, [r0, #16]
{
 80a1748:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a174a:	f7ff f92f 	bl	80a09ac <HAL_USB_USART_Available_Data_For_Write>
 80a174e:	2800      	cmp	r0, #0
 80a1750:	dc01      	bgt.n	80a1756 <_ZN9USBSerial5writeEh+0x14>
 80a1752:	7c60      	ldrb	r0, [r4, #17]
 80a1754:	b128      	cbz	r0, 80a1762 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1756:	4629      	mov	r1, r5
 80a1758:	7c20      	ldrb	r0, [r4, #16]
 80a175a:	f7ff f937 	bl	80a09cc <HAL_USB_USART_Send_Data>
 80a175e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1762:	bd38      	pop	{r3, r4, r5, pc}

080a1764 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1764:	7c00      	ldrb	r0, [r0, #16]
 80a1766:	f7ff b939 	b.w	80a09dc <HAL_USB_USART_Flush_Data>

080a176a <_ZN9USBSerialD0Ev>:
 80a176a:	b510      	push	{r4, lr}
 80a176c:	4604      	mov	r4, r0
 80a176e:	2114      	movs	r1, #20
 80a1770:	f000 f9f9 	bl	80a1b66 <_ZdlPvj>
 80a1774:	4620      	mov	r0, r4
 80a1776:	bd10      	pop	{r4, pc}

080a1778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1778:	b510      	push	{r4, lr}
 80a177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a177e:	4604      	mov	r4, r0
 80a1780:	4608      	mov	r0, r1
 80a1782:	2100      	movs	r1, #0
 80a1784:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1788:	4b04      	ldr	r3, [pc, #16]	; (80a179c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a178a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a178c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a178e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1790:	4611      	mov	r1, r2
  _blocking = true;
 80a1792:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1794:	f7ff f8f2 	bl	80a097c <HAL_USB_USART_Init>
}
 80a1798:	4620      	mov	r0, r4
 80a179a:	bd10      	pop	{r4, pc}
 80a179c:	080a215c 	.word	0x080a215c

080a17a0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a17a0:	2200      	movs	r2, #0
 80a17a2:	7c00      	ldrb	r0, [r0, #16]
 80a17a4:	f7ff b8f2 	b.w	80a098c <HAL_USB_USART_Begin>

080a17a8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a17a8:	7c00      	ldrb	r0, [r0, #16]
 80a17aa:	f7ff b91f 	b.w	80a09ec <HAL_USB_USART_Is_Enabled>

080a17ae <_ZN9USBSerialcvbEv>:
  return isEnabled();
 80a17ae:	f7ff bffb 	b.w	80a17a8 <_ZN9USBSerial9isEnabledEv>

080a17b2 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a17b2:	b510      	push	{r4, lr}
 80a17b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a17b6:	2214      	movs	r2, #20
 80a17b8:	2100      	movs	r1, #0
 80a17ba:	f000 fb0b 	bl	80a1dd4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a17be:	4620      	mov	r0, r4
 80a17c0:	bd10      	pop	{r4, pc}
	...

080a17c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a17c4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a17c6:	4d0f      	ldr	r5, [pc, #60]	; (80a1804 <_Z16_fetch_usbserialv+0x40>)
{
 80a17c8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a17ca:	a801      	add	r0, sp, #4
 80a17cc:	f7ff fff1 	bl	80a17b2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a17d0:	7829      	ldrb	r1, [r5, #0]
 80a17d2:	f3bf 8f5b 	dmb	ish
 80a17d6:	f011 0401 	ands.w	r4, r1, #1
 80a17da:	d110      	bne.n	80a17fe <_Z16_fetch_usbserialv+0x3a>
 80a17dc:	4628      	mov	r0, r5
 80a17de:	f7fe fc62 	bl	80a00a6 <__cxa_guard_acquire>
 80a17e2:	b160      	cbz	r0, 80a17fe <_Z16_fetch_usbserialv+0x3a>
 80a17e4:	4621      	mov	r1, r4
 80a17e6:	aa01      	add	r2, sp, #4
 80a17e8:	4807      	ldr	r0, [pc, #28]	; (80a1808 <_Z16_fetch_usbserialv+0x44>)
 80a17ea:	f7ff ffc5 	bl	80a1778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a17ee:	4628      	mov	r0, r5
 80a17f0:	f7fe fc5e 	bl	80a00b0 <__cxa_guard_release>
 80a17f4:	4a05      	ldr	r2, [pc, #20]	; (80a180c <_Z16_fetch_usbserialv+0x48>)
 80a17f6:	4906      	ldr	r1, [pc, #24]	; (80a1810 <_Z16_fetch_usbserialv+0x4c>)
 80a17f8:	4803      	ldr	r0, [pc, #12]	; (80a1808 <_Z16_fetch_usbserialv+0x44>)
 80a17fa:	f000 f9af 	bl	80a1b5c <__aeabi_atexit>
	return _usbserial;
}
 80a17fe:	4802      	ldr	r0, [pc, #8]	; (80a1808 <_Z16_fetch_usbserialv+0x44>)
 80a1800:	b007      	add	sp, #28
 80a1802:	bd30      	pop	{r4, r5, pc}
 80a1804:	20000128 	.word	0x20000128
 80a1808:	20000130 	.word	0x20000130
 80a180c:	2000006c 	.word	0x2000006c
 80a1810:	080a1705 	.word	0x080a1705

080a1814 <_Z23acquireUSBSerial1Bufferv>:
 80a1814:	b510      	push	{r4, lr}
 80a1816:	4604      	mov	r4, r0
 80a1818:	2214      	movs	r2, #20
 80a181a:	2100      	movs	r1, #0
 80a181c:	f000 fada 	bl	80a1dd4 <memset>
 80a1820:	4620      	mov	r0, r4
 80a1822:	bd10      	pop	{r4, pc}

080a1824 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1824:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1826:	4c0f      	ldr	r4, [pc, #60]	; (80a1864 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1828:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a182a:	a801      	add	r0, sp, #4
 80a182c:	f7ff fff2 	bl	80a1814 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1830:	7823      	ldrb	r3, [r4, #0]
 80a1832:	f3bf 8f5b 	dmb	ish
 80a1836:	07db      	lsls	r3, r3, #31
 80a1838:	d410      	bmi.n	80a185c <_Z17_fetch_usbserial1v+0x38>
 80a183a:	4620      	mov	r0, r4
 80a183c:	f7fe fc33 	bl	80a00a6 <__cxa_guard_acquire>
 80a1840:	b160      	cbz	r0, 80a185c <_Z17_fetch_usbserial1v+0x38>
 80a1842:	2101      	movs	r1, #1
 80a1844:	aa01      	add	r2, sp, #4
 80a1846:	4808      	ldr	r0, [pc, #32]	; (80a1868 <_Z17_fetch_usbserial1v+0x44>)
 80a1848:	f7ff ff96 	bl	80a1778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a184c:	4620      	mov	r0, r4
 80a184e:	f7fe fc2f 	bl	80a00b0 <__cxa_guard_release>
 80a1852:	4a06      	ldr	r2, [pc, #24]	; (80a186c <_Z17_fetch_usbserial1v+0x48>)
 80a1854:	4906      	ldr	r1, [pc, #24]	; (80a1870 <_Z17_fetch_usbserial1v+0x4c>)
 80a1856:	4804      	ldr	r0, [pc, #16]	; (80a1868 <_Z17_fetch_usbserial1v+0x44>)
 80a1858:	f000 f980 	bl	80a1b5c <__aeabi_atexit>
  return _usbserial1;
}
 80a185c:	4802      	ldr	r0, [pc, #8]	; (80a1868 <_Z17_fetch_usbserial1v+0x44>)
 80a185e:	b006      	add	sp, #24
 80a1860:	bd10      	pop	{r4, pc}
 80a1862:	bf00      	nop
 80a1864:	2000012c 	.word	0x2000012c
 80a1868:	20000144 	.word	0x20000144
 80a186c:	2000006c 	.word	0x2000006c
 80a1870:	080a1705 	.word	0x080a1705

080a1874 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1874:	2200      	movs	r2, #0
 80a1876:	6840      	ldr	r0, [r0, #4]
 80a1878:	4611      	mov	r1, r2
 80a187a:	f7ff b943 	b.w	80a0b04 <network_ready>

080a187e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a187e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1880:	4615      	mov	r5, r2
 80a1882:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a1884:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1886:	460e      	mov	r6, r1
 80a1888:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a188a:	2100      	movs	r1, #0
 80a188c:	a803      	add	r0, sp, #12
 80a188e:	f000 faa1 	bl	80a1dd4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1892:	4628      	mov	r0, r5
 80a1894:	f000 fae6 	bl	80a1e64 <strlen>
 80a1898:	2700      	movs	r7, #0
 80a189a:	b281      	uxth	r1, r0
 80a189c:	6873      	ldr	r3, [r6, #4]
 80a189e:	4628      	mov	r0, r5
 80a18a0:	9700      	str	r7, [sp, #0]
 80a18a2:	aa03      	add	r2, sp, #12
 80a18a4:	f7ff f8b2 	bl	80a0a0c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a18a8:	b130      	cbz	r0, 80a18b8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a18aa:	4639      	mov	r1, r7
 80a18ac:	4620      	mov	r0, r4
 80a18ae:	f7ff f9ef 	bl	80a0c90 <_ZN9IPAddressC1Em>
    }
 80a18b2:	4620      	mov	r0, r4
 80a18b4:	b009      	add	sp, #36	; 0x24
 80a18b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a18b8:	4620      	mov	r0, r4
 80a18ba:	a903      	add	r1, sp, #12
 80a18bc:	f7ff f9d6 	bl	80a0c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a18c0:	e7f7      	b.n	80a18b2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a18c2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a18c2:	2200      	movs	r2, #0
 80a18c4:	6840      	ldr	r0, [r0, #4]
 80a18c6:	4611      	mov	r1, r2
 80a18c8:	f7ff b93c 	b.w	80a0b44 <network_listening>

080a18cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a18cc:	2200      	movs	r2, #0
 80a18ce:	6840      	ldr	r0, [r0, #4]
 80a18d0:	4611      	mov	r1, r2
 80a18d2:	f7ff b947 	b.w	80a0b64 <network_get_listen_timeout>

080a18d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a18d6:	2200      	movs	r2, #0
 80a18d8:	6840      	ldr	r0, [r0, #4]
 80a18da:	f7ff b93b 	b.w	80a0b54 <network_set_listen_timeout>

080a18de <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a18de:	2200      	movs	r2, #0
 80a18e0:	6840      	ldr	r0, [r0, #4]
 80a18e2:	f081 0101 	eor.w	r1, r1, #1
 80a18e6:	f7ff b925 	b.w	80a0b34 <network_listen>

080a18ea <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a18ea:	2300      	movs	r3, #0
 80a18ec:	6840      	ldr	r0, [r0, #4]
 80a18ee:	461a      	mov	r2, r3
 80a18f0:	4619      	mov	r1, r3
 80a18f2:	f7ff b917 	b.w	80a0b24 <network_off>

080a18f6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a18f6:	2300      	movs	r3, #0
 80a18f8:	6840      	ldr	r0, [r0, #4]
 80a18fa:	461a      	mov	r2, r3
 80a18fc:	4619      	mov	r1, r3
 80a18fe:	f7ff b909 	b.w	80a0b14 <network_on>

080a1902 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1902:	2200      	movs	r2, #0
 80a1904:	6840      	ldr	r0, [r0, #4]
 80a1906:	4611      	mov	r1, r2
 80a1908:	f7ff b8ec 	b.w	80a0ae4 <network_connecting>

080a190c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a190c:	2200      	movs	r2, #0
 80a190e:	2102      	movs	r1, #2
 80a1910:	6840      	ldr	r0, [r0, #4]
 80a1912:	f7ff b8ef 	b.w	80a0af4 <network_disconnect>

080a1916 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1916:	2300      	movs	r3, #0
 80a1918:	6840      	ldr	r0, [r0, #4]
 80a191a:	461a      	mov	r2, r3
 80a191c:	f7ff b8da 	b.w	80a0ad4 <network_connect>

080a1920 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1920:	2204      	movs	r2, #4
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1924:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1926:	4a02      	ldr	r2, [pc, #8]	; (80a1930 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1928:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a192a:	4770      	bx	lr
 80a192c:	20000158 	.word	0x20000158
 80a1930:	080a218c 	.word	0x080a218c

080a1934 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1934:	b510      	push	{r4, lr}
 80a1936:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1938:	f000 fa94 	bl	80a1e64 <strlen>
 80a193c:	1e43      	subs	r3, r0, #1
 80a193e:	4620      	mov	r0, r4
 80a1940:	4423      	add	r3, r4
	while(i<j){
 80a1942:	4283      	cmp	r3, r0
 80a1944:	d906      	bls.n	80a1954 <_Z11str_reversePc+0x20>
		c = *i;
 80a1946:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1948:	7819      	ldrb	r1, [r3, #0]
 80a194a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a194e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a1952:	e7f6      	b.n	80a1942 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a1954:	bd10      	pop	{r4, pc}

080a1956 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1956:	b570      	push	{r4, r5, r6, lr}
 80a1958:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a195a:	1e91      	subs	r1, r2, #2
 80a195c:	2922      	cmp	r1, #34	; 0x22
 80a195e:	d81d      	bhi.n	80a199c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 80a1960:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a1962:	b930      	cbnz	r0, 80a1972 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a1964:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 80a1966:	4423      	add	r3, r4
 80a1968:	429d      	cmp	r5, r3
 80a196a:	d210      	bcs.n	80a198e <ultoa+0x38>
            *ptr++ = '0';
 80a196c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 80a1970:	e7fa      	b.n	80a1968 <ultoa+0x12>
            result.quot = a/radix;
 80a1972:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1976:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a197a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a197c:	2809      	cmp	r0, #9
                *ptr += '0';
 80a197e:	bf94      	ite	ls
 80a1980:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 80a1982:	3157      	addhi	r1, #87	; 0x57
 80a1984:	b2c9      	uxtb	r1, r1
            a = result.quot;
 80a1986:	4630      	mov	r0, r6
 80a1988:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a198c:	e7e9      	b.n	80a1962 <ultoa+0xc>

	*ptr = '\0';
 80a198e:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a1990:	4620      	mov	r0, r4
	*ptr = '\0';
 80a1992:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 80a1994:	f7ff ffce 	bl	80a1934 <_Z11str_reversePc>
	return buffer;
 80a1998:	4620      	mov	r0, r4
}
 80a199a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a199c:	2000      	movs	r0, #0
 80a199e:	e7fc      	b.n	80a199a <ultoa+0x44>

080a19a0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a19a0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a19a2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a19a4:	460c      	mov	r4, r1
 80a19a6:	4615      	mov	r5, r2
	if(a<0){
 80a19a8:	da0d      	bge.n	80a19c6 <itoa+0x26>
		*buffer = '-';
 80a19aa:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a19ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a19b0:	bf0c      	ite	eq
 80a19b2:	4618      	moveq	r0, r3
 80a19b4:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a19b6:	2301      	movs	r3, #1
		*buffer = '-';
 80a19b8:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a19ba:	462a      	mov	r2, r5
 80a19bc:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a19be:	f7ff ffca 	bl	80a1956 <ultoa>
	}
	return buffer;
}
 80a19c2:	4620      	mov	r0, r4
 80a19c4:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a19c6:	2301      	movs	r3, #1
 80a19c8:	e7f9      	b.n	80a19be <itoa+0x1e>
	...

080a19cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a19cc:	4b01      	ldr	r3, [pc, #4]	; (80a19d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a19ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a19d0:	4770      	bx	lr
 80a19d2:	bf00      	nop
 80a19d4:	20000008 	.word	0x20000008

080a19d8 <serialEventRun>:
{
 80a19d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a19da:	4b13      	ldr	r3, [pc, #76]	; (80a1a28 <serialEventRun+0x50>)
 80a19dc:	b143      	cbz	r3, 80a19f0 <serialEventRun+0x18>
 80a19de:	f7ff fef1 	bl	80a17c4 <_Z16_fetch_usbserialv>
 80a19e2:	6803      	ldr	r3, [r0, #0]
 80a19e4:	691b      	ldr	r3, [r3, #16]
 80a19e6:	4798      	blx	r3
 80a19e8:	2800      	cmp	r0, #0
 80a19ea:	dd01      	ble.n	80a19f0 <serialEventRun+0x18>
        serialEvent();
 80a19ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a19f0:	4b0e      	ldr	r3, [pc, #56]	; (80a1a2c <serialEventRun+0x54>)
 80a19f2:	b143      	cbz	r3, 80a1a06 <serialEventRun+0x2e>
 80a19f4:	f7ff fe42 	bl	80a167c <_Z22__fetch_global_Serial1v>
 80a19f8:	6803      	ldr	r3, [r0, #0]
 80a19fa:	691b      	ldr	r3, [r3, #16]
 80a19fc:	4798      	blx	r3
 80a19fe:	2800      	cmp	r0, #0
 80a1a00:	dd01      	ble.n	80a1a06 <serialEventRun+0x2e>
        serialEvent1();
 80a1a02:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1a06:	4b0a      	ldr	r3, [pc, #40]	; (80a1a30 <serialEventRun+0x58>)
 80a1a08:	b10b      	cbz	r3, 80a1a0e <serialEventRun+0x36>
 80a1a0a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1a0e:	4b09      	ldr	r3, [pc, #36]	; (80a1a34 <serialEventRun+0x5c>)
 80a1a10:	b143      	cbz	r3, 80a1a24 <serialEventRun+0x4c>
 80a1a12:	f7ff ff07 	bl	80a1824 <_Z17_fetch_usbserial1v>
 80a1a16:	6803      	ldr	r3, [r0, #0]
 80a1a18:	691b      	ldr	r3, [r3, #16]
 80a1a1a:	4798      	blx	r3
 80a1a1c:	2800      	cmp	r0, #0
 80a1a1e:	dd01      	ble.n	80a1a24 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1a20:	f3af 8000 	nop.w
}
 80a1a24:	bd08      	pop	{r3, pc}
 80a1a26:	bf00      	nop
	...

080a1a38 <_post_loop>:
{
 80a1a38:	b508      	push	{r3, lr}
	serialEventRun();
 80a1a3a:	f7ff ffcd 	bl	80a19d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1a3e:	f7fe ff15 	bl	80a086c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1a42:	4b01      	ldr	r3, [pc, #4]	; (80a1a48 <_post_loop+0x10>)
 80a1a44:	6018      	str	r0, [r3, #0]
}
 80a1a46:	bd08      	pop	{r3, pc}
 80a1a48:	20000168 	.word	0x20000168

080a1a4c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1a4c:	4805      	ldr	r0, [pc, #20]	; (80a1a64 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1a4e:	4a06      	ldr	r2, [pc, #24]	; (80a1a68 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1a50:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1a52:	1a12      	subs	r2, r2, r0
 80a1a54:	4905      	ldr	r1, [pc, #20]	; (80a1a6c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1a56:	f000 f9af 	bl	80a1db8 <memcpy>
    __backup_sram_signature = signature;
 80a1a5a:	4b05      	ldr	r3, [pc, #20]	; (80a1a70 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1a5c:	4a05      	ldr	r2, [pc, #20]	; (80a1a74 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1a5e:	601a      	str	r2, [r3, #0]
}
 80a1a60:	bd08      	pop	{r3, pc}
 80a1a62:	bf00      	nop
 80a1a64:	40024000 	.word	0x40024000
 80a1a68:	40024004 	.word	0x40024004
 80a1a6c:	080a2450 	.word	0x080a2450
 80a1a70:	40024000 	.word	0x40024000
 80a1a74:	9a271c1e 	.word	0x9a271c1e

080a1a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1a78:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1a7a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1a7c:	461a      	mov	r2, r3
 80a1a7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1a82:	9300      	str	r3, [sp, #0]
 80a1a84:	f7ff f814 	bl	80a0ab0 <system_ctrl_set_result>
}
 80a1a88:	b003      	add	sp, #12
 80a1a8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1a90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1a90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1a92:	8843      	ldrh	r3, [r0, #2]
 80a1a94:	2b0a      	cmp	r3, #10
 80a1a96:	d008      	beq.n	80a1aaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1a98:	2b50      	cmp	r3, #80	; 0x50
 80a1a9a:	d10b      	bne.n	80a1ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1a9c:	4b09      	ldr	r3, [pc, #36]	; (80a1ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1a9e:	681b      	ldr	r3, [r3, #0]
 80a1aa0:	b14b      	cbz	r3, 80a1ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1aa2:	b003      	add	sp, #12
 80a1aa4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1aa8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1aaa:	f7ff ffe5 	bl	80a1a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1aae:	b003      	add	sp, #12
 80a1ab0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ab4:	2300      	movs	r3, #0
 80a1ab6:	461a      	mov	r2, r3
 80a1ab8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1abc:	9300      	str	r3, [sp, #0]
 80a1abe:	f7fe fff7 	bl	80a0ab0 <system_ctrl_set_result>
}
 80a1ac2:	e7f4      	b.n	80a1aae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1ac4:	20000164 	.word	0x20000164

080a1ac8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1ac8:	2100      	movs	r1, #0
{
 80a1aca:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1acc:	4811      	ldr	r0, [pc, #68]	; (80a1b14 <module_user_init_hook+0x4c>)
 80a1ace:	f7ff f889 	bl	80a0be4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a1ad2:	4b11      	ldr	r3, [pc, #68]	; (80a1b18 <module_user_init_hook+0x50>)
 80a1ad4:	681a      	ldr	r2, [r3, #0]
 80a1ad6:	4b11      	ldr	r3, [pc, #68]	; (80a1b1c <module_user_init_hook+0x54>)
 80a1ad8:	429a      	cmp	r2, r3
 80a1ada:	bf0c      	ite	eq
 80a1adc:	2201      	moveq	r2, #1
 80a1ade:	2200      	movne	r2, #0
 80a1ae0:	4b0f      	ldr	r3, [pc, #60]	; (80a1b20 <module_user_init_hook+0x58>)
 80a1ae2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1ae4:	d001      	beq.n	80a1aea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1ae6:	f7ff ffb1 	bl	80a1a4c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1aea:	f7fe feb7 	bl	80a085c <HAL_RNG_GetRandomNumber>
 80a1aee:	4604      	mov	r4, r0
    srand(seed);
 80a1af0:	f000 f978 	bl	80a1de4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1af4:	4b0b      	ldr	r3, [pc, #44]	; (80a1b24 <module_user_init_hook+0x5c>)
 80a1af6:	b113      	cbz	r3, 80a1afe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1af8:	4620      	mov	r0, r4
 80a1afa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1afe:	2100      	movs	r1, #0
 80a1b00:	4808      	ldr	r0, [pc, #32]	; (80a1b24 <module_user_init_hook+0x5c>)
 80a1b02:	f7fe ffdf 	bl	80a0ac4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1b0a:	2100      	movs	r1, #0
 80a1b0c:	4806      	ldr	r0, [pc, #24]	; (80a1b28 <module_user_init_hook+0x60>)
 80a1b0e:	f7fe bfc5 	b.w	80a0a9c <system_ctrl_set_app_request_handler>
 80a1b12:	bf00      	nop
 80a1b14:	080a19cd 	.word	0x080a19cd
 80a1b18:	40024000 	.word	0x40024000
 80a1b1c:	9a271c1e 	.word	0x9a271c1e
 80a1b20:	20000160 	.word	0x20000160
 80a1b24:	00000000 	.word	0x00000000
 80a1b28:	080a1a91 	.word	0x080a1a91

080a1b2c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1b2c:	2300      	movs	r3, #0
 80a1b2e:	b513      	push	{r0, r1, r4, lr}
 80a1b30:	4c07      	ldr	r4, [pc, #28]	; (80a1b50 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1b32:	461a      	mov	r2, r3
 80a1b34:	4619      	mov	r1, r3
 80a1b36:	4620      	mov	r0, r4
 80a1b38:	9300      	str	r3, [sp, #0]
 80a1b3a:	f7ff f8bf 	bl	80a0cbc <_ZN9IPAddressC1Ehhhh>
 80a1b3e:	4620      	mov	r0, r4
 80a1b40:	4a04      	ldr	r2, [pc, #16]	; (80a1b54 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1b42:	4905      	ldr	r1, [pc, #20]	; (80a1b58 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1b44:	b002      	add	sp, #8
 80a1b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1b4a:	f000 b807 	b.w	80a1b5c <__aeabi_atexit>
 80a1b4e:	bf00      	nop
 80a1b50:	2000016c 	.word	0x2000016c
 80a1b54:	2000006c 	.word	0x2000006c
 80a1b58:	080a0c0d 	.word	0x080a0c0d

080a1b5c <__aeabi_atexit>:
 80a1b5c:	460b      	mov	r3, r1
 80a1b5e:	4601      	mov	r1, r0
 80a1b60:	4618      	mov	r0, r3
 80a1b62:	f000 b91b 	b.w	80a1d9c <__cxa_atexit>

080a1b66 <_ZdlPvj>:
 80a1b66:	f7fe ba9a 	b.w	80a009e <_ZdlPv>
	...

080a1b6c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a1b6c:	4901      	ldr	r1, [pc, #4]	; (80a1b74 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a1b6e:	f000 b8fb 	b.w	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1b72:	bf00      	nop
 80a1b74:	080a21d8 	.word	0x080a21d8

080a1b78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a1b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a1b7a:	2400      	movs	r4, #0
 80a1b7c:	2310      	movs	r3, #16
 80a1b7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a1b82:	6803      	ldr	r3, [r0, #0]
 80a1b84:	4615      	mov	r5, r2
 80a1b86:	699e      	ldr	r6, [r3, #24]
 80a1b88:	e9cd 4400 	strd	r4, r4, [sp]
 80a1b8c:	466b      	mov	r3, sp
 80a1b8e:	6812      	ldr	r2, [r2, #0]
 80a1b90:	47b0      	blx	r6
 80a1b92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1b96:	f003 0306 	and.w	r3, r3, #6
 80a1b9a:	2b06      	cmp	r3, #6
 80a1b9c:	bf09      	itett	eq
 80a1b9e:	2001      	moveq	r0, #1
 80a1ba0:	4620      	movne	r0, r4
 80a1ba2:	9b00      	ldreq	r3, [sp, #0]
 80a1ba4:	602b      	streq	r3, [r5, #0]
 80a1ba6:	b004      	add	sp, #16
 80a1ba8:	bd70      	pop	{r4, r5, r6, pc}

080a1baa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a1baa:	9800      	ldr	r0, [sp, #0]
 80a1bac:	4290      	cmp	r0, r2
 80a1bae:	bf14      	ite	ne
 80a1bb0:	2001      	movne	r0, #1
 80a1bb2:	2006      	moveq	r0, #6
 80a1bb4:	4770      	bx	lr
	...

080a1bb8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a1bb8:	b510      	push	{r4, lr}
 80a1bba:	4604      	mov	r4, r0
 80a1bbc:	4b02      	ldr	r3, [pc, #8]	; (80a1bc8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a1bbe:	6003      	str	r3, [r0, #0]
 80a1bc0:	f000 f8cf 	bl	80a1d62 <_ZNSt9type_infoD1Ev>
 80a1bc4:	4620      	mov	r0, r4
 80a1bc6:	bd10      	pop	{r4, pc}
 80a1bc8:	080a2218 	.word	0x080a2218

080a1bcc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a1bcc:	b510      	push	{r4, lr}
 80a1bce:	4604      	mov	r4, r0
 80a1bd0:	f7ff fff2 	bl	80a1bb8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a1bd4:	4620      	mov	r0, r4
 80a1bd6:	2108      	movs	r1, #8
 80a1bd8:	f7ff ffc5 	bl	80a1b66 <_ZdlPvj>
 80a1bdc:	4620      	mov	r0, r4
 80a1bde:	bd10      	pop	{r4, pc}

080a1be0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a1be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1be4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a1be8:	461f      	mov	r7, r3
 80a1bea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a1bee:	4598      	cmp	r8, r3
 80a1bf0:	4606      	mov	r6, r0
 80a1bf2:	4615      	mov	r5, r2
 80a1bf4:	d107      	bne.n	80a1c06 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a1bf6:	9907      	ldr	r1, [sp, #28]
 80a1bf8:	f000 f8b6 	bl	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1bfc:	b118      	cbz	r0, 80a1c06 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a1bfe:	7165      	strb	r5, [r4, #5]
 80a1c00:	2000      	movs	r0, #0
 80a1c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1c06:	4639      	mov	r1, r7
 80a1c08:	4630      	mov	r0, r6
 80a1c0a:	f000 f8ad 	bl	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1c0e:	2800      	cmp	r0, #0
 80a1c10:	d0f6      	beq.n	80a1c00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a1c12:	2301      	movs	r3, #1
 80a1c14:	f8c4 8000 	str.w	r8, [r4]
 80a1c18:	7125      	strb	r5, [r4, #4]
 80a1c1a:	71a3      	strb	r3, [r4, #6]
 80a1c1c:	e7f0      	b.n	80a1c00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a1c1e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a1c1e:	b538      	push	{r3, r4, r5, lr}
 80a1c20:	4615      	mov	r5, r2
 80a1c22:	461c      	mov	r4, r3
 80a1c24:	f000 f8a0 	bl	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1c28:	b120      	cbz	r0, 80a1c34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a1c2a:	2308      	movs	r3, #8
 80a1c2c:	60e3      	str	r3, [r4, #12]
 80a1c2e:	2306      	movs	r3, #6
 80a1c30:	6025      	str	r5, [r4, #0]
 80a1c32:	7123      	strb	r3, [r4, #4]
 80a1c34:	bd38      	pop	{r3, r4, r5, pc}

080a1c36 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a1c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1c3a:	4605      	mov	r5, r0
 80a1c3c:	460c      	mov	r4, r1
 80a1c3e:	4616      	mov	r6, r2
 80a1c40:	461f      	mov	r7, r3
 80a1c42:	f000 f891 	bl	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1c46:	b948      	cbnz	r0, 80a1c5c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a1c48:	2f03      	cmp	r7, #3
 80a1c4a:	d807      	bhi.n	80a1c5c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a1c4c:	6823      	ldr	r3, [r4, #0]
 80a1c4e:	4632      	mov	r2, r6
 80a1c50:	4629      	mov	r1, r5
 80a1c52:	4620      	mov	r0, r4
 80a1c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1c58:	695b      	ldr	r3, [r3, #20]
 80a1c5a:	4718      	bx	r3
 80a1c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1c60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a1c60:	b510      	push	{r4, lr}
 80a1c62:	4604      	mov	r4, r0
 80a1c64:	4b02      	ldr	r3, [pc, #8]	; (80a1c70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a1c66:	6003      	str	r3, [r0, #0]
 80a1c68:	f7ff ffa6 	bl	80a1bb8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a1c6c:	4620      	mov	r0, r4
 80a1c6e:	bd10      	pop	{r4, pc}
 80a1c70:	080a2278 	.word	0x080a2278

080a1c74 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a1c74:	b510      	push	{r4, lr}
 80a1c76:	4604      	mov	r4, r0
 80a1c78:	f7ff fff2 	bl	80a1c60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a1c7c:	4620      	mov	r0, r4
 80a1c7e:	210c      	movs	r1, #12
 80a1c80:	f7ff ff71 	bl	80a1b66 <_ZdlPvj>
 80a1c84:	4620      	mov	r0, r4
 80a1c86:	bd10      	pop	{r4, pc}

080a1c88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a1c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1c8c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a1c90:	4606      	mov	r6, r0
 80a1c92:	4590      	cmp	r8, r2
 80a1c94:	460f      	mov	r7, r1
 80a1c96:	4615      	mov	r5, r2
 80a1c98:	461c      	mov	r4, r3
 80a1c9a:	d00b      	beq.n	80a1cb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a1c9c:	68b0      	ldr	r0, [r6, #8]
 80a1c9e:	462a      	mov	r2, r5
 80a1ca0:	6803      	ldr	r3, [r0, #0]
 80a1ca2:	f8cd 8018 	str.w	r8, [sp, #24]
 80a1ca6:	6a1e      	ldr	r6, [r3, #32]
 80a1ca8:	4639      	mov	r1, r7
 80a1caa:	4623      	mov	r3, r4
 80a1cac:	46b4      	mov	ip, r6
 80a1cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1cb2:	4760      	bx	ip
 80a1cb4:	4619      	mov	r1, r3
 80a1cb6:	f000 f857 	bl	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1cba:	2800      	cmp	r0, #0
 80a1cbc:	d0ee      	beq.n	80a1c9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a1cbe:	2006      	movs	r0, #6
 80a1cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1cc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a1cc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1cc8:	460d      	mov	r5, r1
 80a1cca:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a1cce:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a1cd2:	4619      	mov	r1, r3
 80a1cd4:	4681      	mov	r9, r0
 80a1cd6:	4617      	mov	r7, r2
 80a1cd8:	4698      	mov	r8, r3
 80a1cda:	f000 f845 	bl	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1cde:	b190      	cbz	r0, 80a1d06 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a1ce0:	2d00      	cmp	r5, #0
 80a1ce2:	6034      	str	r4, [r6, #0]
 80a1ce4:	7137      	strb	r7, [r6, #4]
 80a1ce6:	db09      	blt.n	80a1cfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a1ce8:	442c      	add	r4, r5
 80a1cea:	45a2      	cmp	sl, r4
 80a1cec:	bf0c      	ite	eq
 80a1cee:	2406      	moveq	r4, #6
 80a1cf0:	2401      	movne	r4, #1
 80a1cf2:	71b4      	strb	r4, [r6, #6]
 80a1cf4:	2000      	movs	r0, #0
 80a1cf6:	b001      	add	sp, #4
 80a1cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1cfc:	3502      	adds	r5, #2
 80a1cfe:	d1f9      	bne.n	80a1cf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a1d00:	2301      	movs	r3, #1
 80a1d02:	71b3      	strb	r3, [r6, #6]
 80a1d04:	e7f6      	b.n	80a1cf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a1d06:	4554      	cmp	r4, sl
 80a1d08:	d106      	bne.n	80a1d18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a1d0a:	4659      	mov	r1, fp
 80a1d0c:	4648      	mov	r0, r9
 80a1d0e:	f000 f82b 	bl	80a1d68 <_ZNKSt9type_infoeqERKS_>
 80a1d12:	b108      	cbz	r0, 80a1d18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a1d14:	7177      	strb	r7, [r6, #5]
 80a1d16:	e7ed      	b.n	80a1cf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a1d18:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a1d1c:	463a      	mov	r2, r7
 80a1d1e:	6803      	ldr	r3, [r0, #0]
 80a1d20:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a1d24:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a1d28:	69dc      	ldr	r4, [r3, #28]
 80a1d2a:	4629      	mov	r1, r5
 80a1d2c:	4643      	mov	r3, r8
 80a1d2e:	46a4      	mov	ip, r4
 80a1d30:	b001      	add	sp, #4
 80a1d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d36:	4760      	bx	ip

080a1d38 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a1d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1d3c:	4607      	mov	r7, r0
 80a1d3e:	460c      	mov	r4, r1
 80a1d40:	4615      	mov	r5, r2
 80a1d42:	461e      	mov	r6, r3
 80a1d44:	f7ff ff6b 	bl	80a1c1e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a1d48:	b948      	cbnz	r0, 80a1d5e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a1d4a:	68b8      	ldr	r0, [r7, #8]
 80a1d4c:	462a      	mov	r2, r5
 80a1d4e:	6803      	ldr	r3, [r0, #0]
 80a1d50:	4621      	mov	r1, r4
 80a1d52:	699f      	ldr	r7, [r3, #24]
 80a1d54:	4633      	mov	r3, r6
 80a1d56:	46bc      	mov	ip, r7
 80a1d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1d5c:	4760      	bx	ip
 80a1d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1d62 <_ZNSt9type_infoD1Ev>:
 80a1d62:	4770      	bx	lr

080a1d64 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a1d64:	2000      	movs	r0, #0
 80a1d66:	4770      	bx	lr

080a1d68 <_ZNKSt9type_infoeqERKS_>:
 80a1d68:	4281      	cmp	r1, r0
 80a1d6a:	b508      	push	{r3, lr}
 80a1d6c:	d00e      	beq.n	80a1d8c <_ZNKSt9type_infoeqERKS_+0x24>
 80a1d6e:	6840      	ldr	r0, [r0, #4]
 80a1d70:	7803      	ldrb	r3, [r0, #0]
 80a1d72:	2b2a      	cmp	r3, #42	; 0x2a
 80a1d74:	d00c      	beq.n	80a1d90 <_ZNKSt9type_infoeqERKS_+0x28>
 80a1d76:	6849      	ldr	r1, [r1, #4]
 80a1d78:	780b      	ldrb	r3, [r1, #0]
 80a1d7a:	2b2a      	cmp	r3, #42	; 0x2a
 80a1d7c:	bf08      	it	eq
 80a1d7e:	3101      	addeq	r1, #1
 80a1d80:	f000 f85e 	bl	80a1e40 <strcmp>
 80a1d84:	fab0 f080 	clz	r0, r0
 80a1d88:	0940      	lsrs	r0, r0, #5
 80a1d8a:	bd08      	pop	{r3, pc}
 80a1d8c:	2001      	movs	r0, #1
 80a1d8e:	e7fc      	b.n	80a1d8a <_ZNKSt9type_infoeqERKS_+0x22>
 80a1d90:	2000      	movs	r0, #0
 80a1d92:	e7fa      	b.n	80a1d8a <_ZNKSt9type_infoeqERKS_+0x22>

080a1d94 <atol>:
 80a1d94:	220a      	movs	r2, #10
 80a1d96:	2100      	movs	r1, #0
 80a1d98:	f000 b8e8 	b.w	80a1f6c <strtol>

080a1d9c <__cxa_atexit>:
 80a1d9c:	b510      	push	{r4, lr}
 80a1d9e:	4604      	mov	r4, r0
 80a1da0:	4804      	ldr	r0, [pc, #16]	; (80a1db4 <__cxa_atexit+0x18>)
 80a1da2:	4613      	mov	r3, r2
 80a1da4:	b120      	cbz	r0, 80a1db0 <__cxa_atexit+0x14>
 80a1da6:	460a      	mov	r2, r1
 80a1da8:	2002      	movs	r0, #2
 80a1daa:	4621      	mov	r1, r4
 80a1dac:	f3af 8000 	nop.w
 80a1db0:	bd10      	pop	{r4, pc}
 80a1db2:	bf00      	nop
 80a1db4:	00000000 	.word	0x00000000

080a1db8 <memcpy>:
 80a1db8:	440a      	add	r2, r1
 80a1dba:	4291      	cmp	r1, r2
 80a1dbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a1dc0:	d100      	bne.n	80a1dc4 <memcpy+0xc>
 80a1dc2:	4770      	bx	lr
 80a1dc4:	b510      	push	{r4, lr}
 80a1dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1dca:	4291      	cmp	r1, r2
 80a1dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1dd0:	d1f9      	bne.n	80a1dc6 <memcpy+0xe>
 80a1dd2:	bd10      	pop	{r4, pc}

080a1dd4 <memset>:
 80a1dd4:	4603      	mov	r3, r0
 80a1dd6:	4402      	add	r2, r0
 80a1dd8:	4293      	cmp	r3, r2
 80a1dda:	d100      	bne.n	80a1dde <memset+0xa>
 80a1ddc:	4770      	bx	lr
 80a1dde:	f803 1b01 	strb.w	r1, [r3], #1
 80a1de2:	e7f9      	b.n	80a1dd8 <memset+0x4>

080a1de4 <srand>:
 80a1de4:	b538      	push	{r3, r4, r5, lr}
 80a1de6:	4b10      	ldr	r3, [pc, #64]	; (80a1e28 <srand+0x44>)
 80a1de8:	4604      	mov	r4, r0
 80a1dea:	681d      	ldr	r5, [r3, #0]
 80a1dec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1dee:	b9b3      	cbnz	r3, 80a1e1e <srand+0x3a>
 80a1df0:	2018      	movs	r0, #24
 80a1df2:	f7fe fecf 	bl	80a0b94 <malloc>
 80a1df6:	4602      	mov	r2, r0
 80a1df8:	63a8      	str	r0, [r5, #56]	; 0x38
 80a1dfa:	b920      	cbnz	r0, 80a1e06 <srand+0x22>
 80a1dfc:	2142      	movs	r1, #66	; 0x42
 80a1dfe:	4b0b      	ldr	r3, [pc, #44]	; (80a1e2c <srand+0x48>)
 80a1e00:	480b      	ldr	r0, [pc, #44]	; (80a1e30 <srand+0x4c>)
 80a1e02:	f7fe fee7 	bl	80a0bd4 <__assert_func>
 80a1e06:	490b      	ldr	r1, [pc, #44]	; (80a1e34 <srand+0x50>)
 80a1e08:	4b0b      	ldr	r3, [pc, #44]	; (80a1e38 <srand+0x54>)
 80a1e0a:	e9c0 1300 	strd	r1, r3, [r0]
 80a1e0e:	4b0b      	ldr	r3, [pc, #44]	; (80a1e3c <srand+0x58>)
 80a1e10:	2100      	movs	r1, #0
 80a1e12:	6083      	str	r3, [r0, #8]
 80a1e14:	230b      	movs	r3, #11
 80a1e16:	8183      	strh	r3, [r0, #12]
 80a1e18:	2001      	movs	r0, #1
 80a1e1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a1e1e:	2200      	movs	r2, #0
 80a1e20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1e22:	611c      	str	r4, [r3, #16]
 80a1e24:	615a      	str	r2, [r3, #20]
 80a1e26:	bd38      	pop	{r3, r4, r5, pc}
 80a1e28:	20000008 	.word	0x20000008
 80a1e2c:	080a22b1 	.word	0x080a22b1
 80a1e30:	080a22c8 	.word	0x080a22c8
 80a1e34:	abcd330e 	.word	0xabcd330e
 80a1e38:	e66d1234 	.word	0xe66d1234
 80a1e3c:	0005deec 	.word	0x0005deec

080a1e40 <strcmp>:
 80a1e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a1e48:	2a01      	cmp	r2, #1
 80a1e4a:	bf28      	it	cs
 80a1e4c:	429a      	cmpcs	r2, r3
 80a1e4e:	d0f7      	beq.n	80a1e40 <strcmp>
 80a1e50:	1ad0      	subs	r0, r2, r3
 80a1e52:	4770      	bx	lr

080a1e54 <strcpy>:
 80a1e54:	4603      	mov	r3, r0
 80a1e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a1e5a:	f803 2b01 	strb.w	r2, [r3], #1
 80a1e5e:	2a00      	cmp	r2, #0
 80a1e60:	d1f9      	bne.n	80a1e56 <strcpy+0x2>
 80a1e62:	4770      	bx	lr

080a1e64 <strlen>:
 80a1e64:	4603      	mov	r3, r0
 80a1e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1e6a:	2a00      	cmp	r2, #0
 80a1e6c:	d1fb      	bne.n	80a1e66 <strlen+0x2>
 80a1e6e:	1a18      	subs	r0, r3, r0
 80a1e70:	3801      	subs	r0, #1
 80a1e72:	4770      	bx	lr

080a1e74 <_strtol_l.constprop.0>:
 80a1e74:	2b01      	cmp	r3, #1
 80a1e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1e7a:	4680      	mov	r8, r0
 80a1e7c:	d001      	beq.n	80a1e82 <_strtol_l.constprop.0+0xe>
 80a1e7e:	2b24      	cmp	r3, #36	; 0x24
 80a1e80:	d906      	bls.n	80a1e90 <_strtol_l.constprop.0+0x1c>
 80a1e82:	f7fe fe9f 	bl	80a0bc4 <__errno>
 80a1e86:	2316      	movs	r3, #22
 80a1e88:	6003      	str	r3, [r0, #0]
 80a1e8a:	2000      	movs	r0, #0
 80a1e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1e90:	460d      	mov	r5, r1
 80a1e92:	4f35      	ldr	r7, [pc, #212]	; (80a1f68 <_strtol_l.constprop.0+0xf4>)
 80a1e94:	4628      	mov	r0, r5
 80a1e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1e9a:	5de6      	ldrb	r6, [r4, r7]
 80a1e9c:	f016 0608 	ands.w	r6, r6, #8
 80a1ea0:	d1f8      	bne.n	80a1e94 <_strtol_l.constprop.0+0x20>
 80a1ea2:	2c2d      	cmp	r4, #45	; 0x2d
 80a1ea4:	d12f      	bne.n	80a1f06 <_strtol_l.constprop.0+0x92>
 80a1ea6:	2601      	movs	r6, #1
 80a1ea8:	782c      	ldrb	r4, [r5, #0]
 80a1eaa:	1c85      	adds	r5, r0, #2
 80a1eac:	2b00      	cmp	r3, #0
 80a1eae:	d057      	beq.n	80a1f60 <_strtol_l.constprop.0+0xec>
 80a1eb0:	2b10      	cmp	r3, #16
 80a1eb2:	d109      	bne.n	80a1ec8 <_strtol_l.constprop.0+0x54>
 80a1eb4:	2c30      	cmp	r4, #48	; 0x30
 80a1eb6:	d107      	bne.n	80a1ec8 <_strtol_l.constprop.0+0x54>
 80a1eb8:	7828      	ldrb	r0, [r5, #0]
 80a1eba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1ebe:	2858      	cmp	r0, #88	; 0x58
 80a1ec0:	d149      	bne.n	80a1f56 <_strtol_l.constprop.0+0xe2>
 80a1ec2:	2310      	movs	r3, #16
 80a1ec4:	786c      	ldrb	r4, [r5, #1]
 80a1ec6:	3502      	adds	r5, #2
 80a1ec8:	2700      	movs	r7, #0
 80a1eca:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a1ece:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80a1ed2:	fbbe f9f3 	udiv	r9, lr, r3
 80a1ed6:	4638      	mov	r0, r7
 80a1ed8:	fb03 ea19 	mls	sl, r3, r9, lr
 80a1edc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a1ee0:	f1bc 0f09 	cmp.w	ip, #9
 80a1ee4:	d814      	bhi.n	80a1f10 <_strtol_l.constprop.0+0x9c>
 80a1ee6:	4664      	mov	r4, ip
 80a1ee8:	42a3      	cmp	r3, r4
 80a1eea:	dd22      	ble.n	80a1f32 <_strtol_l.constprop.0+0xbe>
 80a1eec:	2f00      	cmp	r7, #0
 80a1eee:	db1d      	blt.n	80a1f2c <_strtol_l.constprop.0+0xb8>
 80a1ef0:	4581      	cmp	r9, r0
 80a1ef2:	d31b      	bcc.n	80a1f2c <_strtol_l.constprop.0+0xb8>
 80a1ef4:	d101      	bne.n	80a1efa <_strtol_l.constprop.0+0x86>
 80a1ef6:	45a2      	cmp	sl, r4
 80a1ef8:	db18      	blt.n	80a1f2c <_strtol_l.constprop.0+0xb8>
 80a1efa:	2701      	movs	r7, #1
 80a1efc:	fb00 4003 	mla	r0, r0, r3, r4
 80a1f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1f04:	e7ea      	b.n	80a1edc <_strtol_l.constprop.0+0x68>
 80a1f06:	2c2b      	cmp	r4, #43	; 0x2b
 80a1f08:	bf04      	itt	eq
 80a1f0a:	782c      	ldrbeq	r4, [r5, #0]
 80a1f0c:	1c85      	addeq	r5, r0, #2
 80a1f0e:	e7cd      	b.n	80a1eac <_strtol_l.constprop.0+0x38>
 80a1f10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a1f14:	f1bc 0f19 	cmp.w	ip, #25
 80a1f18:	d801      	bhi.n	80a1f1e <_strtol_l.constprop.0+0xaa>
 80a1f1a:	3c37      	subs	r4, #55	; 0x37
 80a1f1c:	e7e4      	b.n	80a1ee8 <_strtol_l.constprop.0+0x74>
 80a1f1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a1f22:	f1bc 0f19 	cmp.w	ip, #25
 80a1f26:	d804      	bhi.n	80a1f32 <_strtol_l.constprop.0+0xbe>
 80a1f28:	3c57      	subs	r4, #87	; 0x57
 80a1f2a:	e7dd      	b.n	80a1ee8 <_strtol_l.constprop.0+0x74>
 80a1f2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a1f30:	e7e6      	b.n	80a1f00 <_strtol_l.constprop.0+0x8c>
 80a1f32:	2f00      	cmp	r7, #0
 80a1f34:	da07      	bge.n	80a1f46 <_strtol_l.constprop.0+0xd2>
 80a1f36:	2322      	movs	r3, #34	; 0x22
 80a1f38:	4670      	mov	r0, lr
 80a1f3a:	f8c8 3000 	str.w	r3, [r8]
 80a1f3e:	2a00      	cmp	r2, #0
 80a1f40:	d0a4      	beq.n	80a1e8c <_strtol_l.constprop.0+0x18>
 80a1f42:	1e69      	subs	r1, r5, #1
 80a1f44:	e005      	b.n	80a1f52 <_strtol_l.constprop.0+0xde>
 80a1f46:	b106      	cbz	r6, 80a1f4a <_strtol_l.constprop.0+0xd6>
 80a1f48:	4240      	negs	r0, r0
 80a1f4a:	2a00      	cmp	r2, #0
 80a1f4c:	d09e      	beq.n	80a1e8c <_strtol_l.constprop.0+0x18>
 80a1f4e:	2f00      	cmp	r7, #0
 80a1f50:	d1f7      	bne.n	80a1f42 <_strtol_l.constprop.0+0xce>
 80a1f52:	6011      	str	r1, [r2, #0]
 80a1f54:	e79a      	b.n	80a1e8c <_strtol_l.constprop.0+0x18>
 80a1f56:	2430      	movs	r4, #48	; 0x30
 80a1f58:	2b00      	cmp	r3, #0
 80a1f5a:	d1b5      	bne.n	80a1ec8 <_strtol_l.constprop.0+0x54>
 80a1f5c:	2308      	movs	r3, #8
 80a1f5e:	e7b3      	b.n	80a1ec8 <_strtol_l.constprop.0+0x54>
 80a1f60:	2c30      	cmp	r4, #48	; 0x30
 80a1f62:	d0a9      	beq.n	80a1eb8 <_strtol_l.constprop.0+0x44>
 80a1f64:	230a      	movs	r3, #10
 80a1f66:	e7af      	b.n	80a1ec8 <_strtol_l.constprop.0+0x54>
 80a1f68:	080a2322 	.word	0x080a2322

080a1f6c <strtol>:
 80a1f6c:	4613      	mov	r3, r2
 80a1f6e:	460a      	mov	r2, r1
 80a1f70:	4601      	mov	r1, r0
 80a1f72:	4802      	ldr	r0, [pc, #8]	; (80a1f7c <strtol+0x10>)
 80a1f74:	6800      	ldr	r0, [r0, #0]
 80a1f76:	f7ff bf7d 	b.w	80a1e74 <_strtol_l.constprop.0>
 80a1f7a:	bf00      	nop
 80a1f7c:	20000008 	.word	0x20000008

080a1f80 <dynalib_user>:
 80a1f80:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a1f90:	00000000 6e6e6f43 65746365 6f742064     ....Connected to
 80a1fa0:	6f726220 0072656b 6c696146 74206465      broker.Failed t
 80a1fb0:	6f63206f 63656e6e 6f742074 6f726220     o connect to bro
 80a1fc0:	0072656b 69726553 6f206c61 006e6570     ker.Serial open.
 80a1fd0:	736e6553 6320726f 656e6e6f 64657463     Sensor connected
 80a1fe0:	61657200 676e6964 4400203a 61747369     .reading: .Dista
 80a1ff0:	3a65636e 69640020 6e617473 49006563     nce: .distance.I
 80a2000:	7220746e 65676e61 6d00203a 68507861     nt range: .maxPh
 80a2010:	6e6f746f 04000035 5454514d 4d060004     oton5...MQTT...M
 80a2020:	64734951 00000370                       QIsdp...

080a2028 <_ZTV9IPAddress>:
	...
 80a2030:	080a0c0f 080a0c0d 080a0c41 00707061     ........A...app.

080a2040 <_ZTVN5spark12NetworkClassE>:
	...
 80a2048:	080a0d05 080a0d0f 080a0d19 080a0d23     ............#...
 80a2058:	080a0d2d 080a0d39 080a0d45 080a0d4d     -...9...E...M...
 80a2068:	080a0d55 080a0d61 080a0d69 080a0d73     U...a...i...s...
 80a2078:	080a0d7d 69726977 5400676e 6c435043     }...wiring.TCPCl
 80a2088:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080a2098 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a20a0:	080a1131 080a1159 080a1547 080a1167     1...Y...G...g...
 80a20b0:	080a1135                                5...

080a20b4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a20bc <_ZTV9TCPClient>:
	...
 80a20c4:	080a116d 080a11a1 080a10b9 080a10d3     m...............
 80a20d4:	080a1349 080a10fb 080a11d5 080a112f     I.........../...
 80a20e4:	080a1269 080a154d 080a1203 080a13bd     i...M...........
 80a20f4:	080a146b 080a1423 080a10e3 080a1431     k...#.......1...
 80a2104:	080a11b5 252d5925 64252d6d 3a482554     ....%Y-%m-%dT%H:
 80a2114:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

080a2124 <_ZTV11USARTSerial>:
	...
 80a212c:	080a15cd 080a1635 080a1611 080a0df9     ....5...........
 80a213c:	080a15e1 080a15fd 080a15ef 080a160b     ................
 80a214c:	080a15cf 080a15d3                       ........

080a2154 <_ZTV9USBSerial>:
	...
 80a215c:	080a1705 080a176b 080a1743 080a0df9     ....k...C.......
 80a216c:	080a1735 080a1707 080a1717 080a1765     5...........e...
 80a217c:	080a1727 080a1701                       '.......

080a2184 <_ZTVN5spark9WiFiClassE>:
	...
 80a218c:	080a1917 080a190d 080a1903 080a1875     ............u...
 80a219c:	080a18f7 080a18eb 080a0d45 080a0d4d     ........E...M...
 80a21ac:	080a18df 080a18d7 080a18cd 080a18c3     ................
 80a21bc:	080a187f                                ....

080a21c0 <_ZTSSt19_Sp_make_shared_tag>:
 80a21c0:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80a21d0:	5f646572 00676174                       red_tag.

080a21d8 <_ZTISt19_Sp_make_shared_tag>:
 80a21d8:	080a2218 080a21c0                       ."...!..

080a21e0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a21e0:	080a2278 080a21ec 080a229c              x"...!..."..

080a21ec <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a21ec:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80a21fc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80a220c:	00000045                                E...

080a2210 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a2210:	00000000 080a21e0 080a1bb9 080a1bcd     .....!..........
 80a2220:	080a1d65 080a1d65 080a1c37 080a1b79     e...e...7...y...
 80a2230:	080a1c1f 080a1be1 080a1bab              ............

080a223c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a223c:	080a2278 080a2248 080a21e0              x"..H"...!..

080a2248 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a2248:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80a2258:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80a2268:	456f666e 00000000                       nfoE....

080a2270 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a2270:	00000000 080a223c 080a1c61 080a1c75     ....<"..a...u...
 80a2280:	080a1d65 080a1d65 080a1c37 080a1b79     e...e...7...y...
 80a2290:	080a1d39 080a1cc5 080a1c89              9...........

080a229c <_ZTISt9type_info>:
 80a229c:	080a2218 080a22a4                       ."..."..

080a22a4 <_ZTSSt9type_info>:
 80a22a4:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 80a22b4:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 80a22c4:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
 80a22d4:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
 80a22e4:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
 80a22f4:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
 80a2304:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
 80a2314:	696c6474 61722f62 632e646e               tdlib/rand.c.

080a2321 <_ctype_>:
 80a2321:	20202000 20202020 28282020 20282828     .         ((((( 
 80a2331:	20202020 20202020 20202020 20202020                     
 80a2341:	10108820 10101010 10101010 10101010      ...............
 80a2351:	04040410 04040404 10040404 10101010     ................
 80a2361:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a2371:	01010101 01010101 01010101 10101010     ................
 80a2381:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a2391:	02020202 02020202 02020202 10101010     ................
 80a23a1:	00000020 00000000 00000000 00000000      ...............
	...

080a2422 <link_const_variable_data_end>:
	...

080a2424 <link_constructors_location>:
 80a2424:	080a0299 	.word	0x080a0299
 80a2428:	080a0cf5 	.word	0x080a0cf5
 80a242c:	080a0de5 	.word	0x080a0de5
 80a2430:	080a0f0d 	.word	0x080a0f0d
 80a2434:	080a107d 	.word	0x080a107d
 80a2438:	080a15b9 	.word	0x080a15b9
 80a243c:	080a1921 	.word	0x080a1921
 80a2440:	080a1b2d 	.word	0x080a1b2d

080a2444 <link_constructors_end>:
	...
